{-# LANGUAGE DataKinds #-}
{-# LANGUAGE DeriveAnyClass #-}
{-# LANGUAGE DeriveGeneric #-}
{-# LANGUAGE GADTs #-}
{-# LANGUAGE OverloadedStrings #-}
{-# LANGUAGE TypeApplications #-}
{-# OPTIONS_GHC -fno-warn-name-shadowing #-}
{-# OPTIONS_GHC -fno-warn-unused-imports #-}
{-# OPTIONS_GHC -fno-warn-unused-matches #-}

-- | Generated by Haskell protocol buffer compiler. DO NOT EDIT!
module Monocle.Crawler where

import Control.Applicative ((<$>), (<*>), (<|>))
import qualified Control.Applicative as Hs
import qualified Control.DeepSeq as Hs
import qualified Control.Monad as Hs
import qualified Data.ByteString as Hs
import qualified Data.Coerce as Hs
import qualified Data.Int as Hs (Int16, Int32, Int64)
import qualified Data.List.NonEmpty as Hs (NonEmpty (..))
import qualified Data.Map as Hs (Map, mapKeysMonotonic)
import qualified Data.Proxy as Proxy
import qualified Data.String as Hs (fromString)
import qualified Data.Text.Lazy as Hs (Text)
import qualified Data.Vector as Hs (Vector)
import qualified Data.Word as Hs (Word16, Word32, Word64)
import qualified GHC.Enum as Hs
import qualified GHC.Generics as Hs
import qualified Google.Protobuf.Timestamp
import qualified Monocle.Change
import qualified Proto3.Suite.Class as HsProtobuf
import qualified Proto3.Suite.DotProto as HsProtobuf
import Proto3.Suite.JSONPB ((.:), (.=))
import qualified Proto3.Suite.JSONPB as HsJSONPB
import qualified Proto3.Suite.Types as HsProtobuf
import qualified Proto3.Wire as HsProtobuf
import qualified Unsafe.Coerce as Hs
import qualified Prelude as Hs

data Entity = EntityChange
  deriving (Hs.Show, Hs.Eq, Hs.Generic, Hs.NFData)

instance HsProtobuf.Named Entity where
  nameOf _ = (Hs.fromString "Entity")

instance HsProtobuf.HasDefault Entity

instance Hs.Bounded Entity where
  minBound = EntityChange
  maxBound = EntityChange

instance Hs.Ord Entity where
  compare x y =
    Hs.compare
      (HsProtobuf.fromProtoEnum x)
      (HsProtobuf.fromProtoEnum y)

instance HsProtobuf.ProtoEnum Entity where
  toProtoEnumMay 0 = Hs.Just EntityChange
  toProtoEnumMay _ = Hs.Nothing
  fromProtoEnum (EntityChange) = 0

instance HsJSONPB.ToJSONPB Entity where
  toJSONPB x _ = HsJSONPB.enumFieldString x
  toEncodingPB x _ = HsJSONPB.enumFieldEncoding x

instance HsJSONPB.FromJSONPB Entity where
  parseJSONPB (HsJSONPB.String "Change") = Hs.pure EntityChange
  parseJSONPB v = (HsJSONPB.typeMismatch "Entity" v)

instance HsJSONPB.ToJSON Entity where
  toJSON = HsJSONPB.toAesonValue
  toEncoding = HsJSONPB.toAesonEncoding

instance HsJSONPB.FromJSON Entity where
  parseJSON = HsJSONPB.parseJSONPB

instance HsProtobuf.Finite Entity

data AddRequest = AddRequest
  { addRequestIndex :: Hs.Text,
    addRequestCrawler :: Hs.Text,
    addRequestApikey :: Hs.Text,
    addRequestEntity :: HsProtobuf.Enumerated Monocle.Crawler.Entity,
    addRequestChanges :: Hs.Vector Monocle.Change.Change,
    addRequestEvents :: Hs.Vector Monocle.Change.ChangeEvent
  }
  deriving (Hs.Show, Hs.Eq, Hs.Ord, Hs.Generic, Hs.NFData)

instance HsProtobuf.Named AddRequest where
  nameOf _ = (Hs.fromString "AddRequest")

instance HsProtobuf.HasDefault AddRequest

instance HsProtobuf.Message AddRequest where
  encodeMessage
    _
    AddRequest
      { addRequestIndex = addRequestIndex,
        addRequestCrawler = addRequestCrawler,
        addRequestApikey = addRequestApikey,
        addRequestEntity = addRequestEntity,
        addRequestChanges = addRequestChanges,
        addRequestEvents = addRequestEvents
      } =
      ( Hs.mconcat
          [ ( HsProtobuf.encodeMessageField
                (HsProtobuf.FieldNumber 1)
                addRequestIndex
            ),
            ( HsProtobuf.encodeMessageField
                (HsProtobuf.FieldNumber 2)
                addRequestCrawler
            ),
            ( HsProtobuf.encodeMessageField
                (HsProtobuf.FieldNumber 3)
                addRequestApikey
            ),
            ( HsProtobuf.encodeMessageField
                (HsProtobuf.FieldNumber 4)
                addRequestEntity
            ),
            ( HsProtobuf.encodeMessageField
                (HsProtobuf.FieldNumber 5)
                ( Hs.coerce @(Hs.Vector Monocle.Change.Change)
                    @(HsProtobuf.NestedVec Monocle.Change.Change)
                    addRequestChanges
                )
            ),
            ( HsProtobuf.encodeMessageField
                (HsProtobuf.FieldNumber 6)
                ( Hs.coerce @(Hs.Vector Monocle.Change.ChangeEvent)
                    @(HsProtobuf.NestedVec Monocle.Change.ChangeEvent)
                    addRequestEvents
                )
            )
          ]
      )
  decodeMessage _ =
    (Hs.pure AddRequest)
      <*> ( HsProtobuf.at
              HsProtobuf.decodeMessageField
              (HsProtobuf.FieldNumber 1)
          )
      <*> ( HsProtobuf.at
              HsProtobuf.decodeMessageField
              (HsProtobuf.FieldNumber 2)
          )
      <*> ( HsProtobuf.at
              HsProtobuf.decodeMessageField
              (HsProtobuf.FieldNumber 3)
          )
      <*> ( HsProtobuf.at
              HsProtobuf.decodeMessageField
              (HsProtobuf.FieldNumber 4)
          )
      <*> ( Hs.coerce @(_ (HsProtobuf.NestedVec Monocle.Change.Change))
              @(_ (Hs.Vector Monocle.Change.Change))
              ( HsProtobuf.at
                  HsProtobuf.decodeMessageField
                  (HsProtobuf.FieldNumber 5)
              )
          )
      <*> ( Hs.coerce @(_ (HsProtobuf.NestedVec Monocle.Change.ChangeEvent))
              @(_ (Hs.Vector Monocle.Change.ChangeEvent))
              ( HsProtobuf.at
                  HsProtobuf.decodeMessageField
                  (HsProtobuf.FieldNumber 6)
              )
          )
  dotProto _ =
    [ ( HsProtobuf.DotProtoField
          (HsProtobuf.FieldNumber 1)
          (HsProtobuf.Prim HsProtobuf.String)
          (HsProtobuf.Single "index")
          []
          ""
      ),
      ( HsProtobuf.DotProtoField
          (HsProtobuf.FieldNumber 2)
          (HsProtobuf.Prim HsProtobuf.String)
          (HsProtobuf.Single "crawler")
          []
          ""
      ),
      ( HsProtobuf.DotProtoField
          (HsProtobuf.FieldNumber 3)
          (HsProtobuf.Prim HsProtobuf.String)
          (HsProtobuf.Single "apikey")
          []
          ""
      ),
      ( HsProtobuf.DotProtoField
          (HsProtobuf.FieldNumber 4)
          (HsProtobuf.Prim (HsProtobuf.Named (HsProtobuf.Single "Entity")))
          (HsProtobuf.Single "entity")
          []
          ""
      ),
      ( HsProtobuf.DotProtoField
          (HsProtobuf.FieldNumber 5)
          ( HsProtobuf.Repeated
              ( HsProtobuf.Named
                  ( HsProtobuf.Dots
                      (HsProtobuf.Path ("monocle_change" Hs.:| ["Change"]))
                  )
              )
          )
          (HsProtobuf.Single "changes")
          []
          ""
      ),
      ( HsProtobuf.DotProtoField
          (HsProtobuf.FieldNumber 6)
          ( HsProtobuf.Repeated
              ( HsProtobuf.Named
                  ( HsProtobuf.Dots
                      (HsProtobuf.Path ("monocle_change" Hs.:| ["ChangeEvent"]))
                  )
              )
          )
          (HsProtobuf.Single "events")
          []
          ""
      )
    ]

instance HsJSONPB.ToJSONPB AddRequest where
  toJSONPB (AddRequest f1 f2 f3 f4 f5 f6) =
    ( HsJSONPB.object
        [ "index" .= f1,
          "crawler" .= f2,
          "apikey" .= f3,
          "entity" .= f4,
          "changes" .= f5,
          "events" .= f6
        ]
    )
  toEncodingPB (AddRequest f1 f2 f3 f4 f5 f6) =
    ( HsJSONPB.pairs
        [ "index" .= f1,
          "crawler" .= f2,
          "apikey" .= f3,
          "entity" .= f4,
          "changes" .= f5,
          "events" .= f6
        ]
    )

instance HsJSONPB.FromJSONPB AddRequest where
  parseJSONPB =
    ( HsJSONPB.withObject
        "AddRequest"
        ( \obj ->
            (Hs.pure AddRequest) <*> obj .: "index" <*> obj .: "crawler"
              <*> obj .: "apikey"
              <*> obj .: "entity"
              <*> obj .: "changes"
              <*> obj .: "events"
        )
    )

instance HsJSONPB.ToJSON AddRequest where
  toJSON = HsJSONPB.toAesonValue
  toEncoding = HsJSONPB.toAesonEncoding

instance HsJSONPB.FromJSON AddRequest where
  parseJSON = HsJSONPB.parseJSONPB

instance HsJSONPB.ToSchema AddRequest where
  declareNamedSchema _ =
    do
      let declare_index = HsJSONPB.declareSchemaRef
      addRequestIndex <- declare_index Proxy.Proxy
      let declare_crawler = HsJSONPB.declareSchemaRef
      addRequestCrawler <- declare_crawler Proxy.Proxy
      let declare_apikey = HsJSONPB.declareSchemaRef
      addRequestApikey <- declare_apikey Proxy.Proxy
      let declare_entity = HsJSONPB.declareSchemaRef
      addRequestEntity <- declare_entity Proxy.Proxy
      let declare_changes = HsJSONPB.declareSchemaRef
      addRequestChanges <- declare_changes Proxy.Proxy
      let declare_events = HsJSONPB.declareSchemaRef
      addRequestEvents <- declare_events Proxy.Proxy
      let _ =
            Hs.pure AddRequest <*> HsJSONPB.asProxy declare_index
              <*> HsJSONPB.asProxy declare_crawler
              <*> HsJSONPB.asProxy declare_apikey
              <*> HsJSONPB.asProxy declare_entity
              <*> HsJSONPB.asProxy declare_changes
              <*> HsJSONPB.asProxy declare_events
      Hs.return
        ( HsJSONPB.NamedSchema
            { HsJSONPB._namedSchemaName =
                Hs.Just "AddRequest",
              HsJSONPB._namedSchemaSchema =
                Hs.mempty
                  { HsJSONPB._schemaParamSchema =
                      Hs.mempty
                        { HsJSONPB._paramSchemaType =
                            Hs.Just HsJSONPB.SwaggerObject
                        },
                    HsJSONPB._schemaProperties =
                      HsJSONPB.insOrdFromList
                        [ ("index", addRequestIndex),
                          ("crawler", addRequestCrawler),
                          ("apikey", addRequestApikey),
                          ("entity", addRequestEntity),
                          ("changes", addRequestChanges),
                          ("events", addRequestEvents)
                        ]
                  }
            }
        )

data AddError
  = AddErrorAddUnknownIndex
  | AddErrorAddUnknownCrawler
  | AddErrorAddUnknownApiKey
  | AddErrorAddFailed
  deriving (Hs.Show, Hs.Eq, Hs.Generic, Hs.NFData)

instance HsProtobuf.Named AddError where
  nameOf _ = (Hs.fromString "AddError")

instance HsProtobuf.HasDefault AddError

instance Hs.Bounded AddError where
  minBound = AddErrorAddUnknownIndex
  maxBound = AddErrorAddFailed

instance Hs.Ord AddError where
  compare x y =
    Hs.compare
      (HsProtobuf.fromProtoEnum x)
      (HsProtobuf.fromProtoEnum y)

instance HsProtobuf.ProtoEnum AddError where
  toProtoEnumMay 0 = Hs.Just AddErrorAddUnknownIndex
  toProtoEnumMay 1 = Hs.Just AddErrorAddUnknownCrawler
  toProtoEnumMay 2 = Hs.Just AddErrorAddUnknownApiKey
  toProtoEnumMay 3 = Hs.Just AddErrorAddFailed
  toProtoEnumMay _ = Hs.Nothing
  fromProtoEnum (AddErrorAddUnknownIndex) = 0
  fromProtoEnum (AddErrorAddUnknownCrawler) = 1
  fromProtoEnum (AddErrorAddUnknownApiKey) = 2
  fromProtoEnum (AddErrorAddFailed) = 3

instance HsJSONPB.ToJSONPB AddError where
  toJSONPB x _ = HsJSONPB.enumFieldString x
  toEncodingPB x _ = HsJSONPB.enumFieldEncoding x

instance HsJSONPB.FromJSONPB AddError where
  parseJSONPB (HsJSONPB.String "AddUnknownIndex") =
    Hs.pure AddErrorAddUnknownIndex
  parseJSONPB (HsJSONPB.String "AddUnknownCrawler") =
    Hs.pure AddErrorAddUnknownCrawler
  parseJSONPB (HsJSONPB.String "AddUnknownApiKey") =
    Hs.pure AddErrorAddUnknownApiKey
  parseJSONPB (HsJSONPB.String "AddFailed") =
    Hs.pure AddErrorAddFailed
  parseJSONPB v = (HsJSONPB.typeMismatch "AddError" v)

instance HsJSONPB.ToJSON AddError where
  toJSON = HsJSONPB.toAesonValue
  toEncoding = HsJSONPB.toAesonEncoding

instance HsJSONPB.FromJSON AddError where
  parseJSON = HsJSONPB.parseJSONPB

instance HsProtobuf.Finite AddError

newtype AddResponse = AddResponse
  { addResponseResult ::
      Hs.Maybe AddResponseResult
  }
  deriving (Hs.Show, Hs.Eq, Hs.Ord, Hs.Generic, Hs.NFData)

instance HsProtobuf.Named AddResponse where
  nameOf _ = (Hs.fromString "AddResponse")

instance HsProtobuf.HasDefault AddResponse

instance HsProtobuf.Message AddResponse where
  encodeMessage _ AddResponse {addResponseResult = addResponseResult} =
    ( Hs.mconcat
        [ case addResponseResult of
            Hs.Nothing -> Hs.mempty
            Hs.Just x ->
              case x of
                AddResponseResultError y ->
                  ( HsProtobuf.encodeMessageField
                      (HsProtobuf.FieldNumber 1)
                      (HsProtobuf.ForceEmit y)
                  )
        ]
    )
  decodeMessage _ =
    (Hs.pure AddResponse)
      <*> ( HsProtobuf.oneof
              Hs.Nothing
              [ ( (HsProtobuf.FieldNumber 1),
                  (Hs.pure (Hs.Just Hs.. AddResponseResultError))
                    <*> HsProtobuf.decodeMessageField
                )
              ]
          )
  dotProto _ = []

instance HsJSONPB.ToJSONPB AddResponse where
  toJSONPB (AddResponse f1) =
    ( HsJSONPB.object
        [ ( let encodeResult =
                  ( case f1 of
                      Hs.Just (AddResponseResultError f1) -> (HsJSONPB.pair "error" f1)
                      Hs.Nothing -> Hs.mempty
                  )
             in \options ->
                  if HsJSONPB.optEmitNamedOneof options
                    then
                      ("result" .= (HsJSONPB.objectOrNull [encodeResult] options))
                        options
                    else encodeResult options
          )
        ]
    )
  toEncodingPB (AddResponse f1) =
    ( HsJSONPB.pairs
        [ ( let encodeResult =
                  ( case f1 of
                      Hs.Just (AddResponseResultError f1) -> (HsJSONPB.pair "error" f1)
                      Hs.Nothing -> Hs.mempty
                  )
             in \options ->
                  if HsJSONPB.optEmitNamedOneof options
                    then ("result" .= (HsJSONPB.pairsOrNull [encodeResult] options)) options
                    else encodeResult options
          )
        ]
    )

instance HsJSONPB.FromJSONPB AddResponse where
  parseJSONPB =
    ( HsJSONPB.withObject
        "AddResponse"
        ( \obj ->
            (Hs.pure AddResponse)
              <*> ( let parseResult parseObj =
                          Hs.msum
                            [ Hs.Just Hs.. AddResponseResultError
                                <$> (HsJSONPB.parseField parseObj "error"),
                              Hs.pure Hs.Nothing
                            ]
                     in ( (obj .: "result")
                            Hs.>>= (HsJSONPB.withObject "result" parseResult)
                        )
                          <|> (parseResult obj)
                  )
        )
    )

instance HsJSONPB.ToJSON AddResponse where
  toJSON = HsJSONPB.toAesonValue
  toEncoding = HsJSONPB.toAesonEncoding

instance HsJSONPB.FromJSON AddResponse where
  parseJSON = HsJSONPB.parseJSONPB

instance HsJSONPB.ToSchema AddResponse where
  declareNamedSchema _ =
    do
      let declare_result = HsJSONPB.declareSchemaRef
      addResponseResult <- declare_result Proxy.Proxy
      let _ = Hs.pure AddResponse <*> HsJSONPB.asProxy declare_result
      Hs.return
        ( HsJSONPB.NamedSchema
            { HsJSONPB._namedSchemaName =
                Hs.Just "AddResponse",
              HsJSONPB._namedSchemaSchema =
                Hs.mempty
                  { HsJSONPB._schemaParamSchema =
                      Hs.mempty
                        { HsJSONPB._paramSchemaType =
                            Hs.Just HsJSONPB.SwaggerObject
                        },
                    HsJSONPB._schemaProperties =
                      HsJSONPB.insOrdFromList
                        [("result", addResponseResult)]
                  }
            }
        )

data AddResponseResult
  = AddResponseResultError
      ( HsProtobuf.Enumerated
          Monocle.Crawler.AddError
      )
  deriving (Hs.Show, Hs.Eq, Hs.Ord, Hs.Generic, Hs.NFData)

instance HsProtobuf.Named AddResponseResult where
  nameOf _ = (Hs.fromString "AddResponseResult")

instance HsJSONPB.ToSchema AddResponseResult where
  declareNamedSchema _ =
    do
      let declare_error = HsJSONPB.declareSchemaRef
      addResponseResultError <- declare_error Proxy.Proxy
      let _ =
            Hs.pure AddResponseResultError
              <*> HsJSONPB.asProxy declare_error
      Hs.return
        ( HsJSONPB.NamedSchema
            { HsJSONPB._namedSchemaName =
                Hs.Just "AddResponseResult",
              HsJSONPB._namedSchemaSchema =
                Hs.mempty
                  { HsJSONPB._schemaParamSchema =
                      Hs.mempty
                        { HsJSONPB._paramSchemaType =
                            Hs.Just HsJSONPB.SwaggerObject
                        },
                    HsJSONPB._schemaProperties =
                      HsJSONPB.insOrdFromList
                        [("error", addResponseResultError)],
                    HsJSONPB._schemaMinProperties = Hs.Just 1,
                    HsJSONPB._schemaMaxProperties = Hs.Just 1
                  }
            }
        )

data CommitRequest = CommitRequest
  { commitRequestIndex :: Hs.Text,
    commitRequestCrawler :: Hs.Text,
    commitRequestApikey :: Hs.Text,
    commitRequestEntity ::
      HsProtobuf.Enumerated Monocle.Crawler.Entity,
    commitRequestTimestamp ::
      Hs.Maybe Google.Protobuf.Timestamp.Timestamp
  }
  deriving (Hs.Show, Hs.Eq, Hs.Ord, Hs.Generic, Hs.NFData)

instance HsProtobuf.Named CommitRequest where
  nameOf _ = (Hs.fromString "CommitRequest")

instance HsProtobuf.HasDefault CommitRequest

instance HsProtobuf.Message CommitRequest where
  encodeMessage
    _
    CommitRequest
      { commitRequestIndex = commitRequestIndex,
        commitRequestCrawler = commitRequestCrawler,
        commitRequestApikey = commitRequestApikey,
        commitRequestEntity = commitRequestEntity,
        commitRequestTimestamp = commitRequestTimestamp
      } =
      ( Hs.mconcat
          [ ( HsProtobuf.encodeMessageField
                (HsProtobuf.FieldNumber 1)
                commitRequestIndex
            ),
            ( HsProtobuf.encodeMessageField
                (HsProtobuf.FieldNumber 2)
                commitRequestCrawler
            ),
            ( HsProtobuf.encodeMessageField
                (HsProtobuf.FieldNumber 3)
                commitRequestApikey
            ),
            ( HsProtobuf.encodeMessageField
                (HsProtobuf.FieldNumber 4)
                commitRequestEntity
            ),
            ( HsProtobuf.encodeMessageField
                (HsProtobuf.FieldNumber 5)
                ( Hs.coerce @(Hs.Maybe Google.Protobuf.Timestamp.Timestamp)
                    @(HsProtobuf.Nested Google.Protobuf.Timestamp.Timestamp)
                    commitRequestTimestamp
                )
            )
          ]
      )
  decodeMessage _ =
    (Hs.pure CommitRequest)
      <*> ( HsProtobuf.at
              HsProtobuf.decodeMessageField
              (HsProtobuf.FieldNumber 1)
          )
      <*> ( HsProtobuf.at
              HsProtobuf.decodeMessageField
              (HsProtobuf.FieldNumber 2)
          )
      <*> ( HsProtobuf.at
              HsProtobuf.decodeMessageField
              (HsProtobuf.FieldNumber 3)
          )
      <*> ( HsProtobuf.at
              HsProtobuf.decodeMessageField
              (HsProtobuf.FieldNumber 4)
          )
      <*> ( Hs.coerce
              @(_ (HsProtobuf.Nested Google.Protobuf.Timestamp.Timestamp))
              @(_ (Hs.Maybe Google.Protobuf.Timestamp.Timestamp))
              ( HsProtobuf.at
                  HsProtobuf.decodeMessageField
                  (HsProtobuf.FieldNumber 5)
              )
          )
  dotProto _ =
    [ ( HsProtobuf.DotProtoField
          (HsProtobuf.FieldNumber 1)
          (HsProtobuf.Prim HsProtobuf.String)
          (HsProtobuf.Single "index")
          []
          ""
      ),
      ( HsProtobuf.DotProtoField
          (HsProtobuf.FieldNumber 2)
          (HsProtobuf.Prim HsProtobuf.String)
          (HsProtobuf.Single "crawler")
          []
          ""
      ),
      ( HsProtobuf.DotProtoField
          (HsProtobuf.FieldNumber 3)
          (HsProtobuf.Prim HsProtobuf.String)
          (HsProtobuf.Single "apikey")
          []
          ""
      ),
      ( HsProtobuf.DotProtoField
          (HsProtobuf.FieldNumber 4)
          (HsProtobuf.Prim (HsProtobuf.Named (HsProtobuf.Single "Entity")))
          (HsProtobuf.Single "entity")
          []
          ""
      ),
      ( HsProtobuf.DotProtoField
          (HsProtobuf.FieldNumber 5)
          ( HsProtobuf.Prim
              ( HsProtobuf.Named
                  ( HsProtobuf.Dots
                      (HsProtobuf.Path ("google" Hs.:| ["protobuf", "Timestamp"]))
                  )
              )
          )
          (HsProtobuf.Single "timestamp")
          []
          ""
      )
    ]

instance HsJSONPB.ToJSONPB CommitRequest where
  toJSONPB (CommitRequest f1 f2 f3 f4 f5) =
    ( HsJSONPB.object
        [ "index" .= f1,
          "crawler" .= f2,
          "apikey" .= f3,
          "entity" .= f4,
          "timestamp" .= f5
        ]
    )
  toEncodingPB (CommitRequest f1 f2 f3 f4 f5) =
    ( HsJSONPB.pairs
        [ "index" .= f1,
          "crawler" .= f2,
          "apikey" .= f3,
          "entity" .= f4,
          "timestamp" .= f5
        ]
    )

instance HsJSONPB.FromJSONPB CommitRequest where
  parseJSONPB =
    ( HsJSONPB.withObject
        "CommitRequest"
        ( \obj ->
            (Hs.pure CommitRequest) <*> obj .: "index" <*> obj .: "crawler"
              <*> obj .: "apikey"
              <*> obj .: "entity"
              <*> obj .: "timestamp"
        )
    )

instance HsJSONPB.ToJSON CommitRequest where
  toJSON = HsJSONPB.toAesonValue
  toEncoding = HsJSONPB.toAesonEncoding

instance HsJSONPB.FromJSON CommitRequest where
  parseJSON = HsJSONPB.parseJSONPB

instance HsJSONPB.ToSchema CommitRequest where
  declareNamedSchema _ =
    do
      let declare_index = HsJSONPB.declareSchemaRef
      commitRequestIndex <- declare_index Proxy.Proxy
      let declare_crawler = HsJSONPB.declareSchemaRef
      commitRequestCrawler <- declare_crawler Proxy.Proxy
      let declare_apikey = HsJSONPB.declareSchemaRef
      commitRequestApikey <- declare_apikey Proxy.Proxy
      let declare_entity = HsJSONPB.declareSchemaRef
      commitRequestEntity <- declare_entity Proxy.Proxy
      let declare_timestamp = HsJSONPB.declareSchemaRef
      commitRequestTimestamp <- declare_timestamp Proxy.Proxy
      let _ =
            Hs.pure CommitRequest <*> HsJSONPB.asProxy declare_index
              <*> HsJSONPB.asProxy declare_crawler
              <*> HsJSONPB.asProxy declare_apikey
              <*> HsJSONPB.asProxy declare_entity
              <*> HsJSONPB.asProxy declare_timestamp
      Hs.return
        ( HsJSONPB.NamedSchema
            { HsJSONPB._namedSchemaName =
                Hs.Just "CommitRequest",
              HsJSONPB._namedSchemaSchema =
                Hs.mempty
                  { HsJSONPB._schemaParamSchema =
                      Hs.mempty
                        { HsJSONPB._paramSchemaType =
                            Hs.Just HsJSONPB.SwaggerObject
                        },
                    HsJSONPB._schemaProperties =
                      HsJSONPB.insOrdFromList
                        [ ("index", commitRequestIndex),
                          ("crawler", commitRequestCrawler),
                          ("apikey", commitRequestApikey),
                          ("entity", commitRequestEntity),
                          ("timestamp", commitRequestTimestamp)
                        ]
                  }
            }
        )

data CommitError
  = CommitErrorCommitUnknownIndex
  | CommitErrorCommitUnknownCrawler
  | CommitErrorCommitUnknownApiKey
  | CommitErrorCommitDateInferiorThanPrevious
  deriving (Hs.Show, Hs.Eq, Hs.Generic, Hs.NFData)

instance HsProtobuf.Named CommitError where
  nameOf _ = (Hs.fromString "CommitError")

instance HsProtobuf.HasDefault CommitError

instance Hs.Bounded CommitError where
  minBound = CommitErrorCommitUnknownIndex
  maxBound = CommitErrorCommitDateInferiorThanPrevious

instance Hs.Ord CommitError where
  compare x y =
    Hs.compare
      (HsProtobuf.fromProtoEnum x)
      (HsProtobuf.fromProtoEnum y)

instance HsProtobuf.ProtoEnum CommitError where
  toProtoEnumMay 0 = Hs.Just CommitErrorCommitUnknownIndex
  toProtoEnumMay 1 = Hs.Just CommitErrorCommitUnknownCrawler
  toProtoEnumMay 2 = Hs.Just CommitErrorCommitUnknownApiKey
  toProtoEnumMay 3 =
    Hs.Just CommitErrorCommitDateInferiorThanPrevious
  toProtoEnumMay _ = Hs.Nothing
  fromProtoEnum (CommitErrorCommitUnknownIndex) = 0
  fromProtoEnum (CommitErrorCommitUnknownCrawler) = 1
  fromProtoEnum (CommitErrorCommitUnknownApiKey) = 2
  fromProtoEnum (CommitErrorCommitDateInferiorThanPrevious) = 3

instance HsJSONPB.ToJSONPB CommitError where
  toJSONPB x _ = HsJSONPB.enumFieldString x
  toEncodingPB x _ = HsJSONPB.enumFieldEncoding x

instance HsJSONPB.FromJSONPB CommitError where
  parseJSONPB (HsJSONPB.String "CommitUnknownIndex") =
    Hs.pure CommitErrorCommitUnknownIndex
  parseJSONPB (HsJSONPB.String "CommitUnknownCrawler") =
    Hs.pure CommitErrorCommitUnknownCrawler
  parseJSONPB (HsJSONPB.String "CommitUnknownApiKey") =
    Hs.pure CommitErrorCommitUnknownApiKey
  parseJSONPB (HsJSONPB.String "CommitDateInferiorThanPrevious") =
    Hs.pure CommitErrorCommitDateInferiorThanPrevious
  parseJSONPB v = (HsJSONPB.typeMismatch "CommitError" v)

instance HsJSONPB.ToJSON CommitError where
  toJSON = HsJSONPB.toAesonValue
  toEncoding = HsJSONPB.toAesonEncoding

instance HsJSONPB.FromJSON CommitError where
  parseJSON = HsJSONPB.parseJSONPB

instance HsProtobuf.Finite CommitError

newtype CommitResponse = CommitResponse
  { commitResponseResult ::
      Hs.Maybe CommitResponseResult
  }
  deriving (Hs.Show, Hs.Eq, Hs.Ord, Hs.Generic, Hs.NFData)

instance HsProtobuf.Named CommitResponse where
  nameOf _ = (Hs.fromString "CommitResponse")

instance HsProtobuf.HasDefault CommitResponse

instance HsProtobuf.Message CommitResponse where
  encodeMessage
    _
    CommitResponse {commitResponseResult = commitResponseResult} =
      ( Hs.mconcat
          [ case commitResponseResult of
              Hs.Nothing -> Hs.mempty
              Hs.Just x ->
                case x of
                  CommitResponseResultError y ->
                    ( HsProtobuf.encodeMessageField
                        (HsProtobuf.FieldNumber 1)
                        (HsProtobuf.ForceEmit y)
                    )
                  CommitResponseResultTimestamp y ->
                    ( HsProtobuf.encodeMessageField
                        (HsProtobuf.FieldNumber 2)
                        ( Hs.coerce @(Hs.Maybe Google.Protobuf.Timestamp.Timestamp)
                            @(HsProtobuf.Nested Google.Protobuf.Timestamp.Timestamp)
                            (Hs.Just y)
                        )
                    )
          ]
      )
  decodeMessage _ =
    (Hs.pure CommitResponse)
      <*> ( HsProtobuf.oneof
              Hs.Nothing
              [ ( (HsProtobuf.FieldNumber 1),
                  (Hs.pure (Hs.Just Hs.. CommitResponseResultError))
                    <*> HsProtobuf.decodeMessageField
                ),
                ( (HsProtobuf.FieldNumber 2),
                  (Hs.pure (Hs.fmap CommitResponseResultTimestamp))
                    <*> ( Hs.coerce
                            @(_ (HsProtobuf.Nested Google.Protobuf.Timestamp.Timestamp))
                            @(_ (Hs.Maybe Google.Protobuf.Timestamp.Timestamp))
                            HsProtobuf.decodeMessageField
                        )
                )
              ]
          )
  dotProto _ = []

instance HsJSONPB.ToJSONPB CommitResponse where
  toJSONPB (CommitResponse f1_or_f2) =
    ( HsJSONPB.object
        [ ( let encodeResult =
                  ( case f1_or_f2 of
                      Hs.Just (CommitResponseResultError f1) ->
                        (HsJSONPB.pair "error" f1)
                      Hs.Just (CommitResponseResultTimestamp f2) ->
                        (HsJSONPB.pair "timestamp" f2)
                      Hs.Nothing -> Hs.mempty
                  )
             in \options ->
                  if HsJSONPB.optEmitNamedOneof options
                    then
                      ("result" .= (HsJSONPB.objectOrNull [encodeResult] options))
                        options
                    else encodeResult options
          )
        ]
    )
  toEncodingPB (CommitResponse f1_or_f2) =
    ( HsJSONPB.pairs
        [ ( let encodeResult =
                  ( case f1_or_f2 of
                      Hs.Just (CommitResponseResultError f1) ->
                        (HsJSONPB.pair "error" f1)
                      Hs.Just (CommitResponseResultTimestamp f2) ->
                        (HsJSONPB.pair "timestamp" f2)
                      Hs.Nothing -> Hs.mempty
                  )
             in \options ->
                  if HsJSONPB.optEmitNamedOneof options
                    then ("result" .= (HsJSONPB.pairsOrNull [encodeResult] options)) options
                    else encodeResult options
          )
        ]
    )

instance HsJSONPB.FromJSONPB CommitResponse where
  parseJSONPB =
    ( HsJSONPB.withObject
        "CommitResponse"
        ( \obj ->
            (Hs.pure CommitResponse)
              <*> ( let parseResult parseObj =
                          Hs.msum
                            [ Hs.Just Hs.. CommitResponseResultError
                                <$> (HsJSONPB.parseField parseObj "error"),
                              Hs.Just Hs.. CommitResponseResultTimestamp
                                <$> (HsJSONPB.parseField parseObj "timestamp"),
                              Hs.pure Hs.Nothing
                            ]
                     in ( (obj .: "result")
                            Hs.>>= (HsJSONPB.withObject "result" parseResult)
                        )
                          <|> (parseResult obj)
                  )
        )
    )

instance HsJSONPB.ToJSON CommitResponse where
  toJSON = HsJSONPB.toAesonValue
  toEncoding = HsJSONPB.toAesonEncoding

instance HsJSONPB.FromJSON CommitResponse where
  parseJSON = HsJSONPB.parseJSONPB

instance HsJSONPB.ToSchema CommitResponse where
  declareNamedSchema _ =
    do
      let declare_result = HsJSONPB.declareSchemaRef
      commitResponseResult <- declare_result Proxy.Proxy
      let _ = Hs.pure CommitResponse <*> HsJSONPB.asProxy declare_result
      Hs.return
        ( HsJSONPB.NamedSchema
            { HsJSONPB._namedSchemaName =
                Hs.Just "CommitResponse",
              HsJSONPB._namedSchemaSchema =
                Hs.mempty
                  { HsJSONPB._schemaParamSchema =
                      Hs.mempty
                        { HsJSONPB._paramSchemaType =
                            Hs.Just HsJSONPB.SwaggerObject
                        },
                    HsJSONPB._schemaProperties =
                      HsJSONPB.insOrdFromList
                        [("result", commitResponseResult)]
                  }
            }
        )

data CommitResponseResult
  = CommitResponseResultError
      ( HsProtobuf.Enumerated
          Monocle.Crawler.CommitError
      )
  | CommitResponseResultTimestamp Google.Protobuf.Timestamp.Timestamp
  deriving (Hs.Show, Hs.Eq, Hs.Ord, Hs.Generic, Hs.NFData)

instance HsProtobuf.Named CommitResponseResult where
  nameOf _ = (Hs.fromString "CommitResponseResult")

instance HsJSONPB.ToSchema CommitResponseResult where
  declareNamedSchema _ =
    do
      let declare_error = HsJSONPB.declareSchemaRef
      commitResponseResultError <- declare_error Proxy.Proxy
      let _ =
            Hs.pure CommitResponseResultError
              <*> HsJSONPB.asProxy declare_error
      let declare_timestamp = HsJSONPB.declareSchemaRef
      commitResponseResultTimestamp <- declare_timestamp Proxy.Proxy
      let _ =
            Hs.pure CommitResponseResultTimestamp
              <*> HsJSONPB.asProxy declare_timestamp
      Hs.return
        ( HsJSONPB.NamedSchema
            { HsJSONPB._namedSchemaName =
                Hs.Just "CommitResponseResult",
              HsJSONPB._namedSchemaSchema =
                Hs.mempty
                  { HsJSONPB._schemaParamSchema =
                      Hs.mempty
                        { HsJSONPB._paramSchemaType =
                            Hs.Just HsJSONPB.SwaggerObject
                        },
                    HsJSONPB._schemaProperties =
                      HsJSONPB.insOrdFromList
                        [ ("error", commitResponseResultError),
                          ( "timestamp",
                            commitResponseResultTimestamp
                          )
                        ],
                    HsJSONPB._schemaMinProperties = Hs.Just 1,
                    HsJSONPB._schemaMaxProperties = Hs.Just 1
                  }
            }
        )

data CommitInfoRequest = CommitInfoRequest
  { commitInfoRequestIndex ::
      Hs.Text,
    commitInfoRequestCrawler :: Hs.Text
  }
  deriving (Hs.Show, Hs.Eq, Hs.Ord, Hs.Generic, Hs.NFData)

instance HsProtobuf.Named CommitInfoRequest where
  nameOf _ = (Hs.fromString "CommitInfoRequest")

instance HsProtobuf.HasDefault CommitInfoRequest

instance HsProtobuf.Message CommitInfoRequest where
  encodeMessage
    _
    CommitInfoRequest
      { commitInfoRequestIndex = commitInfoRequestIndex,
        commitInfoRequestCrawler = commitInfoRequestCrawler
      } =
      ( Hs.mconcat
          [ ( HsProtobuf.encodeMessageField
                (HsProtobuf.FieldNumber 1)
                commitInfoRequestIndex
            ),
            ( HsProtobuf.encodeMessageField
                (HsProtobuf.FieldNumber 2)
                commitInfoRequestCrawler
            )
          ]
      )
  decodeMessage _ =
    (Hs.pure CommitInfoRequest)
      <*> ( HsProtobuf.at
              HsProtobuf.decodeMessageField
              (HsProtobuf.FieldNumber 1)
          )
      <*> ( HsProtobuf.at
              HsProtobuf.decodeMessageField
              (HsProtobuf.FieldNumber 2)
          )
  dotProto _ =
    [ ( HsProtobuf.DotProtoField
          (HsProtobuf.FieldNumber 1)
          (HsProtobuf.Prim HsProtobuf.String)
          (HsProtobuf.Single "index")
          []
          ""
      ),
      ( HsProtobuf.DotProtoField
          (HsProtobuf.FieldNumber 2)
          (HsProtobuf.Prim HsProtobuf.String)
          (HsProtobuf.Single "crawler")
          []
          ""
      )
    ]

instance HsJSONPB.ToJSONPB CommitInfoRequest where
  toJSONPB (CommitInfoRequest f1 f2) =
    (HsJSONPB.object ["index" .= f1, "crawler" .= f2])
  toEncodingPB (CommitInfoRequest f1 f2) =
    (HsJSONPB.pairs ["index" .= f1, "crawler" .= f2])

instance HsJSONPB.FromJSONPB CommitInfoRequest where
  parseJSONPB =
    ( HsJSONPB.withObject
        "CommitInfoRequest"
        ( \obj ->
            (Hs.pure CommitInfoRequest) <*> obj .: "index"
              <*> obj .: "crawler"
        )
    )

instance HsJSONPB.ToJSON CommitInfoRequest where
  toJSON = HsJSONPB.toAesonValue
  toEncoding = HsJSONPB.toAesonEncoding

instance HsJSONPB.FromJSON CommitInfoRequest where
  parseJSON = HsJSONPB.parseJSONPB

instance HsJSONPB.ToSchema CommitInfoRequest where
  declareNamedSchema _ =
    do
      let declare_index = HsJSONPB.declareSchemaRef
      commitInfoRequestIndex <- declare_index Proxy.Proxy
      let declare_crawler = HsJSONPB.declareSchemaRef
      commitInfoRequestCrawler <- declare_crawler Proxy.Proxy
      let _ =
            Hs.pure CommitInfoRequest
              <*> HsJSONPB.asProxy declare_index
              <*> HsJSONPB.asProxy declare_crawler
      Hs.return
        ( HsJSONPB.NamedSchema
            { HsJSONPB._namedSchemaName =
                Hs.Just "CommitInfoRequest",
              HsJSONPB._namedSchemaSchema =
                Hs.mempty
                  { HsJSONPB._schemaParamSchema =
                      Hs.mempty
                        { HsJSONPB._paramSchemaType =
                            Hs.Just HsJSONPB.SwaggerObject
                        },
                    HsJSONPB._schemaProperties =
                      HsJSONPB.insOrdFromList
                        [ ("index", commitInfoRequestIndex),
                          ("crawler", commitInfoRequestCrawler)
                        ]
                  }
            }
        )

data CommitInfoError
  = CommitInfoErrorCommitGetUnknownIndex
  | CommitInfoErrorCommitGetUnknownCrawler
  deriving (Hs.Show, Hs.Eq, Hs.Generic, Hs.NFData)

instance HsProtobuf.Named CommitInfoError where
  nameOf _ = (Hs.fromString "CommitInfoError")

instance HsProtobuf.HasDefault CommitInfoError

instance Hs.Bounded CommitInfoError where
  minBound = CommitInfoErrorCommitGetUnknownIndex
  maxBound = CommitInfoErrorCommitGetUnknownCrawler

instance Hs.Ord CommitInfoError where
  compare x y =
    Hs.compare
      (HsProtobuf.fromProtoEnum x)
      (HsProtobuf.fromProtoEnum y)

instance HsProtobuf.ProtoEnum CommitInfoError where
  toProtoEnumMay 0 = Hs.Just CommitInfoErrorCommitGetUnknownIndex
  toProtoEnumMay 1 = Hs.Just CommitInfoErrorCommitGetUnknownCrawler
  toProtoEnumMay _ = Hs.Nothing
  fromProtoEnum (CommitInfoErrorCommitGetUnknownIndex) = 0
  fromProtoEnum (CommitInfoErrorCommitGetUnknownCrawler) = 1

instance HsJSONPB.ToJSONPB CommitInfoError where
  toJSONPB x _ = HsJSONPB.enumFieldString x
  toEncodingPB x _ = HsJSONPB.enumFieldEncoding x

instance HsJSONPB.FromJSONPB CommitInfoError where
  parseJSONPB (HsJSONPB.String "CommitGetUnknownIndex") =
    Hs.pure CommitInfoErrorCommitGetUnknownIndex
  parseJSONPB (HsJSONPB.String "CommitGetUnknownCrawler") =
    Hs.pure CommitInfoErrorCommitGetUnknownCrawler
  parseJSONPB v = (HsJSONPB.typeMismatch "CommitInfoError" v)

instance HsJSONPB.ToJSON CommitInfoError where
  toJSON = HsJSONPB.toAesonValue
  toEncoding = HsJSONPB.toAesonEncoding

instance HsJSONPB.FromJSON CommitInfoError where
  parseJSON = HsJSONPB.parseJSONPB

instance HsProtobuf.Finite CommitInfoError

newtype CommitInfoResponse = CommitInfoResponse
  { commitInfoResponseResult ::
      Hs.Maybe CommitInfoResponseResult
  }
  deriving (Hs.Show, Hs.Eq, Hs.Ord, Hs.Generic, Hs.NFData)

instance HsProtobuf.Named CommitInfoResponse where
  nameOf _ = (Hs.fromString "CommitInfoResponse")

instance HsProtobuf.HasDefault CommitInfoResponse

instance HsProtobuf.Message CommitInfoResponse where
  encodeMessage
    _
    CommitInfoResponse
      { commitInfoResponseResult =
          commitInfoResponseResult
      } =
      ( Hs.mconcat
          [ case commitInfoResponseResult of
              Hs.Nothing -> Hs.mempty
              Hs.Just x ->
                case x of
                  CommitInfoResponseResultError y ->
                    ( HsProtobuf.encodeMessageField
                        (HsProtobuf.FieldNumber 1)
                        (HsProtobuf.ForceEmit y)
                    )
                  CommitInfoResponseResultLastCommitAt y ->
                    ( HsProtobuf.encodeMessageField
                        (HsProtobuf.FieldNumber 2)
                        ( Hs.coerce @(Hs.Maybe Google.Protobuf.Timestamp.Timestamp)
                            @(HsProtobuf.Nested Google.Protobuf.Timestamp.Timestamp)
                            (Hs.Just y)
                        )
                    )
          ]
      )
  decodeMessage _ =
    (Hs.pure CommitInfoResponse)
      <*> ( HsProtobuf.oneof
              Hs.Nothing
              [ ( (HsProtobuf.FieldNumber 1),
                  (Hs.pure (Hs.Just Hs.. CommitInfoResponseResultError))
                    <*> HsProtobuf.decodeMessageField
                ),
                ( (HsProtobuf.FieldNumber 2),
                  (Hs.pure (Hs.fmap CommitInfoResponseResultLastCommitAt))
                    <*> ( Hs.coerce
                            @(_ (HsProtobuf.Nested Google.Protobuf.Timestamp.Timestamp))
                            @(_ (Hs.Maybe Google.Protobuf.Timestamp.Timestamp))
                            HsProtobuf.decodeMessageField
                        )
                )
              ]
          )
  dotProto _ = []

instance HsJSONPB.ToJSONPB CommitInfoResponse where
  toJSONPB (CommitInfoResponse f1_or_f2) =
    ( HsJSONPB.object
        [ ( let encodeResult =
                  ( case f1_or_f2 of
                      Hs.Just (CommitInfoResponseResultError f1) ->
                        (HsJSONPB.pair "error" f1)
                      Hs.Just (CommitInfoResponseResultLastCommitAt f2) ->
                        (HsJSONPB.pair "last_commit_at" f2)
                      Hs.Nothing -> Hs.mempty
                  )
             in \options ->
                  if HsJSONPB.optEmitNamedOneof options
                    then
                      ("result" .= (HsJSONPB.objectOrNull [encodeResult] options))
                        options
                    else encodeResult options
          )
        ]
    )
  toEncodingPB (CommitInfoResponse f1_or_f2) =
    ( HsJSONPB.pairs
        [ ( let encodeResult =
                  ( case f1_or_f2 of
                      Hs.Just (CommitInfoResponseResultError f1) ->
                        (HsJSONPB.pair "error" f1)
                      Hs.Just (CommitInfoResponseResultLastCommitAt f2) ->
                        (HsJSONPB.pair "last_commit_at" f2)
                      Hs.Nothing -> Hs.mempty
                  )
             in \options ->
                  if HsJSONPB.optEmitNamedOneof options
                    then ("result" .= (HsJSONPB.pairsOrNull [encodeResult] options)) options
                    else encodeResult options
          )
        ]
    )

instance HsJSONPB.FromJSONPB CommitInfoResponse where
  parseJSONPB =
    ( HsJSONPB.withObject
        "CommitInfoResponse"
        ( \obj ->
            (Hs.pure CommitInfoResponse)
              <*> ( let parseResult parseObj =
                          Hs.msum
                            [ Hs.Just Hs.. CommitInfoResponseResultError
                                <$> (HsJSONPB.parseField parseObj "error"),
                              Hs.Just Hs.. CommitInfoResponseResultLastCommitAt
                                <$> (HsJSONPB.parseField parseObj "last_commit_at"),
                              Hs.pure Hs.Nothing
                            ]
                     in ( (obj .: "result")
                            Hs.>>= (HsJSONPB.withObject "result" parseResult)
                        )
                          <|> (parseResult obj)
                  )
        )
    )

instance HsJSONPB.ToJSON CommitInfoResponse where
  toJSON = HsJSONPB.toAesonValue
  toEncoding = HsJSONPB.toAesonEncoding

instance HsJSONPB.FromJSON CommitInfoResponse where
  parseJSON = HsJSONPB.parseJSONPB

instance HsJSONPB.ToSchema CommitInfoResponse where
  declareNamedSchema _ =
    do
      let declare_result = HsJSONPB.declareSchemaRef
      commitInfoResponseResult <- declare_result Proxy.Proxy
      let _ =
            Hs.pure CommitInfoResponse
              <*> HsJSONPB.asProxy declare_result
      Hs.return
        ( HsJSONPB.NamedSchema
            { HsJSONPB._namedSchemaName =
                Hs.Just "CommitInfoResponse",
              HsJSONPB._namedSchemaSchema =
                Hs.mempty
                  { HsJSONPB._schemaParamSchema =
                      Hs.mempty
                        { HsJSONPB._paramSchemaType =
                            Hs.Just HsJSONPB.SwaggerObject
                        },
                    HsJSONPB._schemaProperties =
                      HsJSONPB.insOrdFromList
                        [("result", commitInfoResponseResult)]
                  }
            }
        )

data CommitInfoResponseResult
  = CommitInfoResponseResultError
      ( HsProtobuf.Enumerated
          Monocle.Crawler.CommitInfoError
      )
  | CommitInfoResponseResultLastCommitAt Google.Protobuf.Timestamp.Timestamp
  deriving (Hs.Show, Hs.Eq, Hs.Ord, Hs.Generic, Hs.NFData)

instance HsProtobuf.Named CommitInfoResponseResult where
  nameOf _ = (Hs.fromString "CommitInfoResponseResult")

instance HsJSONPB.ToSchema CommitInfoResponseResult where
  declareNamedSchema _ =
    do
      let declare_error = HsJSONPB.declareSchemaRef
      commitInfoResponseResultError <- declare_error Proxy.Proxy
      let _ =
            Hs.pure CommitInfoResponseResultError
              <*> HsJSONPB.asProxy declare_error
      let declare_last_commit_at = HsJSONPB.declareSchemaRef
      commitInfoResponseResultLastCommitAt <-
        declare_last_commit_at
          Proxy.Proxy
      let _ =
            Hs.pure CommitInfoResponseResultLastCommitAt
              <*> HsJSONPB.asProxy declare_last_commit_at
      Hs.return
        ( HsJSONPB.NamedSchema
            { HsJSONPB._namedSchemaName =
                Hs.Just "CommitInfoResponseResult",
              HsJSONPB._namedSchemaSchema =
                Hs.mempty
                  { HsJSONPB._schemaParamSchema =
                      Hs.mempty
                        { HsJSONPB._paramSchemaType =
                            Hs.Just HsJSONPB.SwaggerObject
                        },
                    HsJSONPB._schemaProperties =
                      HsJSONPB.insOrdFromList
                        [ ("error", commitInfoResponseResultError),
                          ( "last_commit_at",
                            commitInfoResponseResultLastCommitAt
                          )
                        ],
                    HsJSONPB._schemaMinProperties = Hs.Just 1,
                    HsJSONPB._schemaMaxProperties = Hs.Just 1
                  }
            }
        )
