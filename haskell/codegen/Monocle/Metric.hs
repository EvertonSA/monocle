{-# LANGUAGE DataKinds #-}
{-# LANGUAGE DeriveAnyClass #-}
{-# LANGUAGE DeriveGeneric #-}
{-# LANGUAGE GADTs #-}
{-# LANGUAGE OverloadedStrings #-}
{-# LANGUAGE TypeApplications #-}
{-# LANGUAGE NoGeneralisedNewtypeDeriving #-}
{-# OPTIONS_GHC -fno-warn-missing-export-lists #-}
{-# OPTIONS_GHC -fno-warn-name-shadowing #-}
{-# OPTIONS_GHC -fno-warn-unused-imports #-}
{-# OPTIONS_GHC -fno-warn-unused-matches #-}

-- | Generated by Haskell protocol buffer compiler. DO NOT EDIT!
module Monocle.Metric where

import Control.Applicative ((<$>), (<*>), (<|>))
import qualified Control.Applicative as Hs
import qualified Control.DeepSeq as Hs
import qualified Control.Monad as Hs
import qualified Data.ByteString as Hs
import qualified Data.Coerce as Hs
import qualified Data.Int as Hs (Int16, Int32, Int64)
import qualified Data.List.NonEmpty as Hs (NonEmpty (..))
import qualified Data.Map as Hs (Map, mapKeysMonotonic)
import qualified Data.Proxy as Proxy
import qualified Data.String as Hs (fromString)
import qualified Data.Text.Lazy as Hs (Text)
import qualified Data.Vector as Hs (Vector)
import qualified Data.Word as Hs (Word16, Word32, Word64)
import qualified GHC.Enum as Hs
import qualified GHC.Generics as Hs
import qualified Proto3.Suite.Class as HsProtobuf
import qualified Proto3.Suite.DotProto as HsProtobuf
import Proto3.Suite.JSONPB ((.:), (.=))
import qualified Proto3.Suite.JSONPB as HsJSONPB
import qualified Proto3.Suite.Types as HsProtobuf
import qualified Proto3.Wire as HsProtobuf
import qualified Unsafe.Coerce as Hs
import qualified Prelude as Hs

data MetricInfo = MetricInfo
  { metricInfoName :: Hs.Text,
    metricInfoDescription :: Hs.Text,
    metricInfoLongDescription :: Hs.Text
  }
  deriving (Hs.Show, Hs.Eq, Hs.Ord, Hs.Generic, Hs.NFData)

instance HsProtobuf.Named MetricInfo where
  nameOf _ = (Hs.fromString "MetricInfo")

instance HsProtobuf.HasDefault MetricInfo

instance HsProtobuf.Message MetricInfo where
  encodeMessage
    _
    MetricInfo
      { metricInfoName = metricInfoName,
        metricInfoDescription = metricInfoDescription,
        metricInfoLongDescription = metricInfoLongDescription
      } =
      ( Hs.mconcat
          [ ( HsProtobuf.encodeMessageField
                (HsProtobuf.FieldNumber 1)
                metricInfoName
            ),
            ( HsProtobuf.encodeMessageField
                (HsProtobuf.FieldNumber 2)
                metricInfoDescription
            ),
            ( HsProtobuf.encodeMessageField
                (HsProtobuf.FieldNumber 3)
                metricInfoLongDescription
            )
          ]
      )
  decodeMessage _ =
    (Hs.pure MetricInfo)
      <*> ( HsProtobuf.at
              HsProtobuf.decodeMessageField
              (HsProtobuf.FieldNumber 1)
          )
      <*> ( HsProtobuf.at
              HsProtobuf.decodeMessageField
              (HsProtobuf.FieldNumber 2)
          )
      <*> ( HsProtobuf.at
              HsProtobuf.decodeMessageField
              (HsProtobuf.FieldNumber 3)
          )
  dotProto _ =
    [ ( HsProtobuf.DotProtoField
          (HsProtobuf.FieldNumber 1)
          (HsProtobuf.Prim HsProtobuf.String)
          (HsProtobuf.Single "name")
          []
          ""
      ),
      ( HsProtobuf.DotProtoField
          (HsProtobuf.FieldNumber 2)
          (HsProtobuf.Prim HsProtobuf.String)
          (HsProtobuf.Single "description")
          []
          ""
      ),
      ( HsProtobuf.DotProtoField
          (HsProtobuf.FieldNumber 3)
          (HsProtobuf.Prim HsProtobuf.String)
          (HsProtobuf.Single "long_description")
          []
          ""
      )
    ]

instance HsJSONPB.ToJSONPB MetricInfo where
  toJSONPB (MetricInfo f1 f2 f3) =
    ( HsJSONPB.object
        ["name" .= f1, "description" .= f2, "long_description" .= f3]
    )
  toEncodingPB (MetricInfo f1 f2 f3) =
    ( HsJSONPB.pairs
        ["name" .= f1, "description" .= f2, "long_description" .= f3]
    )

instance HsJSONPB.FromJSONPB MetricInfo where
  parseJSONPB =
    ( HsJSONPB.withObject
        "MetricInfo"
        ( \obj ->
            (Hs.pure MetricInfo) <*> obj .: "name" <*> obj .: "description"
              <*> obj .: "long_description"
        )
    )

instance HsJSONPB.ToJSON MetricInfo where
  toJSON = HsJSONPB.toAesonValue
  toEncoding = HsJSONPB.toAesonEncoding

instance HsJSONPB.FromJSON MetricInfo where
  parseJSON = HsJSONPB.parseJSONPB

newtype ListRequest = ListRequest {listRequestVoid :: Hs.Text}
  deriving (Hs.Show, Hs.Eq, Hs.Ord, Hs.Generic, Hs.NFData)

instance HsProtobuf.Named ListRequest where
  nameOf _ = (Hs.fromString "ListRequest")

instance HsProtobuf.HasDefault ListRequest

instance HsProtobuf.Message ListRequest where
  encodeMessage _ ListRequest {listRequestVoid = listRequestVoid} =
    ( Hs.mconcat
        [ ( HsProtobuf.encodeMessageField
              (HsProtobuf.FieldNumber 1)
              listRequestVoid
          )
        ]
    )
  decodeMessage _ =
    (Hs.pure ListRequest)
      <*> ( HsProtobuf.at
              HsProtobuf.decodeMessageField
              (HsProtobuf.FieldNumber 1)
          )
  dotProto _ =
    [ ( HsProtobuf.DotProtoField
          (HsProtobuf.FieldNumber 1)
          (HsProtobuf.Prim HsProtobuf.String)
          (HsProtobuf.Single "void")
          []
          ""
      )
    ]

instance HsJSONPB.ToJSONPB ListRequest where
  toJSONPB (ListRequest f1) = (HsJSONPB.object ["void" .= f1])
  toEncodingPB (ListRequest f1) = (HsJSONPB.pairs ["void" .= f1])

instance HsJSONPB.FromJSONPB ListRequest where
  parseJSONPB =
    ( HsJSONPB.withObject
        "ListRequest"
        (\obj -> (Hs.pure ListRequest) <*> obj .: "void")
    )

instance HsJSONPB.ToJSON ListRequest where
  toJSON = HsJSONPB.toAesonValue
  toEncoding = HsJSONPB.toAesonEncoding

instance HsJSONPB.FromJSON ListRequest where
  parseJSON = HsJSONPB.parseJSONPB

newtype ListResponse = ListResponse
  { listResponseMetrics ::
      Hs.Vector Monocle.Metric.MetricInfo
  }
  deriving (Hs.Show, Hs.Eq, Hs.Ord, Hs.Generic, Hs.NFData)

instance HsProtobuf.Named ListResponse where
  nameOf _ = (Hs.fromString "ListResponse")

instance HsProtobuf.HasDefault ListResponse

instance HsProtobuf.Message ListResponse where
  encodeMessage
    _
    ListResponse {listResponseMetrics = listResponseMetrics} =
      ( Hs.mconcat
          [ ( HsProtobuf.encodeMessageField
                (HsProtobuf.FieldNumber 1)
                ( Hs.coerce @(Hs.Vector Monocle.Metric.MetricInfo)
                    @(HsProtobuf.NestedVec Monocle.Metric.MetricInfo)
                    listResponseMetrics
                )
            )
          ]
      )
  decodeMessage _ =
    (Hs.pure ListResponse)
      <*> ( Hs.coerce @(_ (HsProtobuf.NestedVec Monocle.Metric.MetricInfo))
              @(_ (Hs.Vector Monocle.Metric.MetricInfo))
              ( HsProtobuf.at
                  HsProtobuf.decodeMessageField
                  (HsProtobuf.FieldNumber 1)
              )
          )
  dotProto _ =
    [ ( HsProtobuf.DotProtoField
          (HsProtobuf.FieldNumber 1)
          ( HsProtobuf.Repeated
              (HsProtobuf.Named (HsProtobuf.Single "MetricInfo"))
          )
          (HsProtobuf.Single "metrics")
          []
          ""
      )
    ]

instance HsJSONPB.ToJSONPB ListResponse where
  toJSONPB (ListResponse f1) = (HsJSONPB.object ["metrics" .= f1])
  toEncodingPB (ListResponse f1) = (HsJSONPB.pairs ["metrics" .= f1])

instance HsJSONPB.FromJSONPB ListResponse where
  parseJSONPB =
    ( HsJSONPB.withObject
        "ListResponse"
        (\obj -> (Hs.pure ListResponse) <*> obj .: "metrics")
    )

instance HsJSONPB.ToJSON ListResponse where
  toJSON = HsJSONPB.toAesonValue
  toEncoding = HsJSONPB.toAesonEncoding

instance HsJSONPB.FromJSON ListResponse where
  parseJSON = HsJSONPB.parseJSONPB
