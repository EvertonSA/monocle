{-# LANGUAGE DataKinds #-}
{-# LANGUAGE DeriveAnyClass #-}
{-# LANGUAGE DeriveGeneric #-}
{-# LANGUAGE GADTs #-}
{-# LANGUAGE OverloadedStrings #-}
{-# LANGUAGE TypeApplications #-}
{-# OPTIONS_GHC -fno-warn-name-shadowing #-}
{-# OPTIONS_GHC -fno-warn-unused-imports #-}
{-# OPTIONS_GHC -fno-warn-unused-matches #-}

-- | Generated by Haskell protocol buffer compiler. DO NOT EDIT!
module Monocle.UserGroup where

import Control.Applicative ((<$>), (<*>), (<|>))
import qualified Control.Applicative as Hs
import qualified Control.DeepSeq as Hs
import qualified Control.Monad as Hs
import qualified Data.ByteString as Hs
import qualified Data.Coerce as Hs
import qualified Data.Int as Hs (Int16, Int32, Int64)
import qualified Data.List.NonEmpty as Hs (NonEmpty (..))
import qualified Data.Map as Hs (Map, mapKeysMonotonic)
import qualified Data.Proxy as Proxy
import qualified Data.String as Hs (fromString)
import qualified Data.Text.Lazy as Hs (Text)
import qualified Data.Vector as Hs (Vector)
import qualified Data.Word as Hs (Word16, Word32, Word64)
import qualified GHC.Enum as Hs
import qualified GHC.Generics as Hs
import qualified Proto3.Suite.Class as HsProtobuf
import qualified Proto3.Suite.DotProto as HsProtobuf
import Proto3.Suite.JSONPB ((.:), (.=))
import qualified Proto3.Suite.JSONPB as HsJSONPB
import qualified Proto3.Suite.Types as HsProtobuf
import qualified Proto3.Wire as HsProtobuf
import qualified Unsafe.Coerce as Hs
import qualified Prelude as Hs

data GroupDefinition = GroupDefinition
  { groupDefinitionName ::
      Hs.Text,
    groupDefinitionMembers :: Hs.Word32
  }
  deriving (Hs.Show, Hs.Eq, Hs.Ord, Hs.Generic, Hs.NFData)

instance HsProtobuf.Named GroupDefinition where
  nameOf _ = (Hs.fromString "GroupDefinition")

instance HsProtobuf.HasDefault GroupDefinition

instance HsProtobuf.Message GroupDefinition where
  encodeMessage
    _
    GroupDefinition
      { groupDefinitionName = groupDefinitionName,
        groupDefinitionMembers = groupDefinitionMembers
      } =
      ( Hs.mconcat
          [ ( HsProtobuf.encodeMessageField
                (HsProtobuf.FieldNumber 1)
                groupDefinitionName
            ),
            ( HsProtobuf.encodeMessageField
                (HsProtobuf.FieldNumber 2)
                groupDefinitionMembers
            )
          ]
      )
  decodeMessage _ =
    (Hs.pure GroupDefinition)
      <*> ( HsProtobuf.at
              HsProtobuf.decodeMessageField
              (HsProtobuf.FieldNumber 1)
          )
      <*> ( HsProtobuf.at
              HsProtobuf.decodeMessageField
              (HsProtobuf.FieldNumber 2)
          )
  dotProto _ =
    [ ( HsProtobuf.DotProtoField
          (HsProtobuf.FieldNumber 1)
          (HsProtobuf.Prim HsProtobuf.String)
          (HsProtobuf.Single "name")
          []
          ""
      ),
      ( HsProtobuf.DotProtoField
          (HsProtobuf.FieldNumber 2)
          (HsProtobuf.Prim HsProtobuf.UInt32)
          (HsProtobuf.Single "members")
          []
          ""
      )
    ]

instance HsJSONPB.ToJSONPB GroupDefinition where
  toJSONPB (GroupDefinition f1 f2) =
    (HsJSONPB.object ["name" .= f1, "members" .= f2])
  toEncodingPB (GroupDefinition f1 f2) =
    (HsJSONPB.pairs ["name" .= f1, "members" .= f2])

instance HsJSONPB.FromJSONPB GroupDefinition where
  parseJSONPB =
    ( HsJSONPB.withObject
        "GroupDefinition"
        ( \obj ->
            (Hs.pure GroupDefinition) <*> obj .: "name" <*> obj .: "members"
        )
    )

instance HsJSONPB.ToJSON GroupDefinition where
  toJSON = HsJSONPB.toAesonValue
  toEncoding = HsJSONPB.toAesonEncoding

instance HsJSONPB.FromJSON GroupDefinition where
  parseJSON = HsJSONPB.parseJSONPB

instance HsJSONPB.ToSchema GroupDefinition where
  declareNamedSchema _ =
    do
      let declare_name = HsJSONPB.declareSchemaRef
      groupDefinitionName <- declare_name Proxy.Proxy
      let declare_members = HsJSONPB.declareSchemaRef
      groupDefinitionMembers <- declare_members Proxy.Proxy
      let _ =
            Hs.pure GroupDefinition <*> HsJSONPB.asProxy declare_name
              <*> HsJSONPB.asProxy declare_members
      Hs.return
        ( HsJSONPB.NamedSchema
            { HsJSONPB._namedSchemaName =
                Hs.Just "GroupDefinition",
              HsJSONPB._namedSchemaSchema =
                Hs.mempty
                  { HsJSONPB._schemaParamSchema =
                      Hs.mempty
                        { HsJSONPB._paramSchemaType =
                            Hs.Just HsJSONPB.SwaggerObject
                        },
                    HsJSONPB._schemaProperties =
                      HsJSONPB.insOrdFromList
                        [ ("name", groupDefinitionName),
                          ("members", groupDefinitionMembers)
                        ]
                  }
            }
        )

newtype ListRequest = ListRequest {listRequestIndex :: Hs.Text}
  deriving (Hs.Show, Hs.Eq, Hs.Ord, Hs.Generic, Hs.NFData)

instance HsProtobuf.Named ListRequest where
  nameOf _ = (Hs.fromString "ListRequest")

instance HsProtobuf.HasDefault ListRequest

instance HsProtobuf.Message ListRequest where
  encodeMessage _ ListRequest {listRequestIndex = listRequestIndex} =
    ( Hs.mconcat
        [ ( HsProtobuf.encodeMessageField
              (HsProtobuf.FieldNumber 1)
              listRequestIndex
          )
        ]
    )
  decodeMessage _ =
    (Hs.pure ListRequest)
      <*> ( HsProtobuf.at
              HsProtobuf.decodeMessageField
              (HsProtobuf.FieldNumber 1)
          )
  dotProto _ =
    [ ( HsProtobuf.DotProtoField
          (HsProtobuf.FieldNumber 1)
          (HsProtobuf.Prim HsProtobuf.String)
          (HsProtobuf.Single "index")
          []
          ""
      )
    ]

instance HsJSONPB.ToJSONPB ListRequest where
  toJSONPB (ListRequest f1) = (HsJSONPB.object ["index" .= f1])
  toEncodingPB (ListRequest f1) = (HsJSONPB.pairs ["index" .= f1])

instance HsJSONPB.FromJSONPB ListRequest where
  parseJSONPB =
    ( HsJSONPB.withObject
        "ListRequest"
        (\obj -> (Hs.pure ListRequest) <*> obj .: "index")
    )

instance HsJSONPB.ToJSON ListRequest where
  toJSON = HsJSONPB.toAesonValue
  toEncoding = HsJSONPB.toAesonEncoding

instance HsJSONPB.FromJSON ListRequest where
  parseJSON = HsJSONPB.parseJSONPB

instance HsJSONPB.ToSchema ListRequest where
  declareNamedSchema _ =
    do
      let declare_index = HsJSONPB.declareSchemaRef
      listRequestIndex <- declare_index Proxy.Proxy
      let _ = Hs.pure ListRequest <*> HsJSONPB.asProxy declare_index
      Hs.return
        ( HsJSONPB.NamedSchema
            { HsJSONPB._namedSchemaName =
                Hs.Just "ListRequest",
              HsJSONPB._namedSchemaSchema =
                Hs.mempty
                  { HsJSONPB._schemaParamSchema =
                      Hs.mempty
                        { HsJSONPB._paramSchemaType =
                            Hs.Just HsJSONPB.SwaggerObject
                        },
                    HsJSONPB._schemaProperties =
                      HsJSONPB.insOrdFromList
                        [("index", listRequestIndex)]
                  }
            }
        )

newtype ListResponse = ListResponse
  { listResponseItems ::
      Hs.Vector Monocle.UserGroup.GroupDefinition
  }
  deriving (Hs.Show, Hs.Eq, Hs.Ord, Hs.Generic, Hs.NFData)

instance HsProtobuf.Named ListResponse where
  nameOf _ = (Hs.fromString "ListResponse")

instance HsProtobuf.HasDefault ListResponse

instance HsProtobuf.Message ListResponse where
  encodeMessage _ ListResponse {listResponseItems = listResponseItems} =
    ( Hs.mconcat
        [ ( HsProtobuf.encodeMessageField
              (HsProtobuf.FieldNumber 1)
              ( Hs.coerce @(Hs.Vector Monocle.UserGroup.GroupDefinition)
                  @(HsProtobuf.NestedVec Monocle.UserGroup.GroupDefinition)
                  listResponseItems
              )
          )
        ]
    )
  decodeMessage _ =
    (Hs.pure ListResponse)
      <*> ( Hs.coerce
              @(_ (HsProtobuf.NestedVec Monocle.UserGroup.GroupDefinition))
              @(_ (Hs.Vector Monocle.UserGroup.GroupDefinition))
              ( HsProtobuf.at
                  HsProtobuf.decodeMessageField
                  (HsProtobuf.FieldNumber 1)
              )
          )
  dotProto _ =
    [ ( HsProtobuf.DotProtoField
          (HsProtobuf.FieldNumber 1)
          ( HsProtobuf.Repeated
              (HsProtobuf.Named (HsProtobuf.Single "GroupDefinition"))
          )
          (HsProtobuf.Single "items")
          []
          ""
      )
    ]

instance HsJSONPB.ToJSONPB ListResponse where
  toJSONPB (ListResponse f1) = (HsJSONPB.object ["items" .= f1])
  toEncodingPB (ListResponse f1) = (HsJSONPB.pairs ["items" .= f1])

instance HsJSONPB.FromJSONPB ListResponse where
  parseJSONPB =
    ( HsJSONPB.withObject
        "ListResponse"
        (\obj -> (Hs.pure ListResponse) <*> obj .: "items")
    )

instance HsJSONPB.ToJSON ListResponse where
  toJSON = HsJSONPB.toAesonValue
  toEncoding = HsJSONPB.toAesonEncoding

instance HsJSONPB.FromJSON ListResponse where
  parseJSON = HsJSONPB.parseJSONPB

instance HsJSONPB.ToSchema ListResponse where
  declareNamedSchema _ =
    do
      let declare_items = HsJSONPB.declareSchemaRef
      listResponseItems <- declare_items Proxy.Proxy
      let _ = Hs.pure ListResponse <*> HsJSONPB.asProxy declare_items
      Hs.return
        ( HsJSONPB.NamedSchema
            { HsJSONPB._namedSchemaName =
                Hs.Just "ListResponse",
              HsJSONPB._namedSchemaSchema =
                Hs.mempty
                  { HsJSONPB._schemaParamSchema =
                      Hs.mempty
                        { HsJSONPB._paramSchemaType =
                            Hs.Just HsJSONPB.SwaggerObject
                        },
                    HsJSONPB._schemaProperties =
                      HsJSONPB.insOrdFromList
                        [("items", listResponseItems)]
                  }
            }
        )
