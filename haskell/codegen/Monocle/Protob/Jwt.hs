{-# LANGUAGE DataKinds #-}
{-# LANGUAGE DeriveAnyClass #-}
{-# LANGUAGE DeriveGeneric #-}
{-# LANGUAGE GADTs #-}
{-# LANGUAGE OverloadedStrings #-}
{-# LANGUAGE TypeApplications #-}
{-# LANGUAGE NoGeneralisedNewtypeDeriving #-}
{-# OPTIONS_GHC -fno-warn-missing-export-lists #-}
{-# OPTIONS_GHC -fno-warn-name-shadowing #-}
{-# OPTIONS_GHC -fno-warn-unused-imports #-}
{-# OPTIONS_GHC -fno-warn-unused-matches #-}

-- | Generated by Haskell protocol buffer compiler. DO NOT EDIT!
module Monocle.Protob.Jwt where

import Control.Applicative ((<$>), (<*>), (<|>))
import qualified Control.Applicative as Hs
import qualified Control.DeepSeq as Hs
import qualified Control.Monad as Hs
import qualified Data.ByteString as Hs
import qualified Data.Coerce as Hs
import qualified Data.Int as Hs (Int16, Int32, Int64)
import qualified Data.List.NonEmpty as Hs (NonEmpty (..))
import qualified Data.Map as Hs (Map, mapKeysMonotonic)
import qualified Data.Proxy as Proxy
import qualified Data.String as Hs (fromString)
import qualified Data.Text.Lazy as Hs (Text)
import qualified Data.Vector as Hs (Vector)
import qualified Data.Word as Hs (Word16, Word32, Word64)
import qualified GHC.Enum as Hs
import qualified GHC.Generics as Hs
import qualified Proto3.Suite.Class as HsProtobuf
import qualified Proto3.Suite.DotProto as HsProtobuf
import Proto3.Suite.JSONPB ((.:), (.=))
import qualified Proto3.Suite.JSONPB as HsJSONPB
import qualified Proto3.Suite.Types as HsProtobuf
import qualified Proto3.Wire as HsProtobuf
import qualified Unsafe.Coerce as Hs
import qualified Prelude as Hs

newtype GetMagicJWTRequest = GetMagicJWTRequest
  { getMagicJWTRequestToken ::
      Hs.Text
  }
  deriving (Hs.Show, Hs.Eq, Hs.Ord, Hs.Generic, Hs.NFData)

instance HsProtobuf.Named GetMagicJWTRequest where
  nameOf _ = (Hs.fromString "GetMagicJWTRequest")

instance HsProtobuf.HasDefault GetMagicJWTRequest

instance HsProtobuf.Message GetMagicJWTRequest where
  encodeMessage
    _
    GetMagicJWTRequest
      { getMagicJWTRequestToken =
          getMagicJWTRequestToken
      } =
      ( Hs.mconcat
          [ ( HsProtobuf.encodeMessageField
                (HsProtobuf.FieldNumber 1)
                getMagicJWTRequestToken
            )
          ]
      )
  decodeMessage _ =
    (Hs.pure GetMagicJWTRequest)
      <*> ( HsProtobuf.at
              HsProtobuf.decodeMessageField
              (HsProtobuf.FieldNumber 1)
          )
  dotProto _ =
    [ ( HsProtobuf.DotProtoField
          (HsProtobuf.FieldNumber 1)
          (HsProtobuf.Prim HsProtobuf.String)
          (HsProtobuf.Single "token")
          []
          ""
      )
    ]

instance HsJSONPB.ToJSONPB GetMagicJWTRequest where
  toJSONPB (GetMagicJWTRequest f1) =
    (HsJSONPB.object ["token" .= f1])
  toEncodingPB (GetMagicJWTRequest f1) =
    (HsJSONPB.pairs ["token" .= f1])

instance HsJSONPB.FromJSONPB GetMagicJWTRequest where
  parseJSONPB =
    ( HsJSONPB.withObject
        "GetMagicJWTRequest"
        (\obj -> (Hs.pure GetMagicJWTRequest) <*> obj .: "token")
    )

instance HsJSONPB.ToJSON GetMagicJWTRequest where
  toJSON = HsJSONPB.toAesonValue
  toEncoding = HsJSONPB.toAesonEncoding

instance HsJSONPB.FromJSON GetMagicJWTRequest where
  parseJSON = HsJSONPB.parseJSONPB

newtype Unauthorized = Unauthorized {unauthorizedReason :: Hs.Text}
  deriving (Hs.Show, Hs.Eq, Hs.Ord, Hs.Generic, Hs.NFData)

instance HsProtobuf.Named Unauthorized where
  nameOf _ = (Hs.fromString "Unauthorized")

instance HsProtobuf.HasDefault Unauthorized

instance HsProtobuf.Message Unauthorized where
  encodeMessage
    _
    Unauthorized {unauthorizedReason = unauthorizedReason} =
      ( Hs.mconcat
          [ ( HsProtobuf.encodeMessageField
                (HsProtobuf.FieldNumber 1)
                unauthorizedReason
            )
          ]
      )
  decodeMessage _ =
    (Hs.pure Unauthorized)
      <*> ( HsProtobuf.at
              HsProtobuf.decodeMessageField
              (HsProtobuf.FieldNumber 1)
          )
  dotProto _ =
    [ ( HsProtobuf.DotProtoField
          (HsProtobuf.FieldNumber 1)
          (HsProtobuf.Prim HsProtobuf.String)
          (HsProtobuf.Single "reason")
          []
          ""
      )
    ]

instance HsJSONPB.ToJSONPB Unauthorized where
  toJSONPB (Unauthorized f1) = (HsJSONPB.object ["reason" .= f1])
  toEncodingPB (Unauthorized f1) = (HsJSONPB.pairs ["reason" .= f1])

instance HsJSONPB.FromJSONPB Unauthorized where
  parseJSONPB =
    ( HsJSONPB.withObject
        "Unauthorized"
        (\obj -> (Hs.pure Unauthorized) <*> obj .: "reason")
    )

instance HsJSONPB.ToJSON Unauthorized where
  toJSON = HsJSONPB.toAesonValue
  toEncoding = HsJSONPB.toAesonEncoding

instance HsJSONPB.FromJSON Unauthorized where
  parseJSON = HsJSONPB.parseJSONPB

newtype SuccessJWT = SuccessJWT {successJWTJwt :: Hs.Text}
  deriving (Hs.Show, Hs.Eq, Hs.Ord, Hs.Generic, Hs.NFData)

instance HsProtobuf.Named SuccessJWT where
  nameOf _ = (Hs.fromString "SuccessJWT")

instance HsProtobuf.HasDefault SuccessJWT

instance HsProtobuf.Message SuccessJWT where
  encodeMessage _ SuccessJWT {successJWTJwt = successJWTJwt} =
    ( Hs.mconcat
        [ ( HsProtobuf.encodeMessageField
              (HsProtobuf.FieldNumber 1)
              successJWTJwt
          )
        ]
    )
  decodeMessage _ =
    (Hs.pure SuccessJWT)
      <*> ( HsProtobuf.at
              HsProtobuf.decodeMessageField
              (HsProtobuf.FieldNumber 1)
          )
  dotProto _ =
    [ ( HsProtobuf.DotProtoField
          (HsProtobuf.FieldNumber 1)
          (HsProtobuf.Prim HsProtobuf.String)
          (HsProtobuf.Single "jwt")
          []
          ""
      )
    ]

instance HsJSONPB.ToJSONPB SuccessJWT where
  toJSONPB (SuccessJWT f1) = (HsJSONPB.object ["jwt" .= f1])
  toEncodingPB (SuccessJWT f1) = (HsJSONPB.pairs ["jwt" .= f1])

instance HsJSONPB.FromJSONPB SuccessJWT where
  parseJSONPB =
    ( HsJSONPB.withObject
        "SuccessJWT"
        (\obj -> (Hs.pure SuccessJWT) <*> obj .: "jwt")
    )

instance HsJSONPB.ToJSON SuccessJWT where
  toJSON = HsJSONPB.toAesonValue
  toEncoding = HsJSONPB.toAesonEncoding

instance HsJSONPB.FromJSON SuccessJWT where
  parseJSON = HsJSONPB.parseJSONPB

newtype GetMagicJWTResponse = GetMagicJWTResponse
  { getMagicJWTResponseResult ::
      Hs.Maybe GetMagicJWTResponseResult
  }
  deriving (Hs.Show, Hs.Eq, Hs.Ord, Hs.Generic, Hs.NFData)

instance HsProtobuf.Named GetMagicJWTResponse where
  nameOf _ = (Hs.fromString "GetMagicJWTResponse")

instance HsProtobuf.HasDefault GetMagicJWTResponse

instance HsProtobuf.Message GetMagicJWTResponse where
  encodeMessage
    _
    GetMagicJWTResponse
      { getMagicJWTResponseResult =
          getMagicJWTResponseResult
      } =
      ( Hs.mconcat
          [ case getMagicJWTResponseResult of
              Hs.Nothing -> Hs.mempty
              Hs.Just x ->
                case x of
                  GetMagicJWTResponseResultReason y ->
                    ( HsProtobuf.encodeMessageField
                        (HsProtobuf.FieldNumber 1)
                        ( Hs.coerce @(Hs.Maybe Monocle.Protob.Jwt.Unauthorized)
                            @(HsProtobuf.Nested Monocle.Protob.Jwt.Unauthorized)
                            (Hs.Just y)
                        )
                    )
                  GetMagicJWTResponseResultSuccessJwt y ->
                    ( HsProtobuf.encodeMessageField
                        (HsProtobuf.FieldNumber 2)
                        ( Hs.coerce @(Hs.Maybe Monocle.Protob.Jwt.SuccessJWT)
                            @(HsProtobuf.Nested Monocle.Protob.Jwt.SuccessJWT)
                            (Hs.Just y)
                        )
                    )
          ]
      )
  decodeMessage _ =
    (Hs.pure GetMagicJWTResponse)
      <*> ( HsProtobuf.oneof
              Hs.Nothing
              [ ( (HsProtobuf.FieldNumber 1),
                  (Hs.pure (Hs.fmap GetMagicJWTResponseResultReason))
                    <*> ( Hs.coerce @(_ (HsProtobuf.Nested Monocle.Protob.Jwt.Unauthorized))
                            @(_ (Hs.Maybe Monocle.Protob.Jwt.Unauthorized))
                            HsProtobuf.decodeMessageField
                        )
                ),
                ( (HsProtobuf.FieldNumber 2),
                  (Hs.pure (Hs.fmap GetMagicJWTResponseResultSuccessJwt))
                    <*> ( Hs.coerce @(_ (HsProtobuf.Nested Monocle.Protob.Jwt.SuccessJWT))
                            @(_ (Hs.Maybe Monocle.Protob.Jwt.SuccessJWT))
                            HsProtobuf.decodeMessageField
                        )
                )
              ]
          )
  dotProto _ = []

instance HsJSONPB.ToJSONPB GetMagicJWTResponse where
  toJSONPB (GetMagicJWTResponse f1_or_f2) =
    ( HsJSONPB.object
        [ ( let encodeResult =
                  ( case f1_or_f2 of
                      Hs.Just (GetMagicJWTResponseResultReason f1) ->
                        (HsJSONPB.pair "reason" f1)
                      Hs.Just (GetMagicJWTResponseResultSuccessJwt f2) ->
                        (HsJSONPB.pair "success_jwt" f2)
                      Hs.Nothing -> Hs.mempty
                  )
             in \options ->
                  if HsJSONPB.optEmitNamedOneof options
                    then
                      ("result" .= (HsJSONPB.objectOrNull [encodeResult] options))
                        options
                    else encodeResult options
          )
        ]
    )
  toEncodingPB (GetMagicJWTResponse f1_or_f2) =
    ( HsJSONPB.pairs
        [ ( let encodeResult =
                  ( case f1_or_f2 of
                      Hs.Just (GetMagicJWTResponseResultReason f1) ->
                        (HsJSONPB.pair "reason" f1)
                      Hs.Just (GetMagicJWTResponseResultSuccessJwt f2) ->
                        (HsJSONPB.pair "success_jwt" f2)
                      Hs.Nothing -> Hs.mempty
                  )
             in \options ->
                  if HsJSONPB.optEmitNamedOneof options
                    then ("result" .= (HsJSONPB.pairsOrNull [encodeResult] options)) options
                    else encodeResult options
          )
        ]
    )

instance HsJSONPB.FromJSONPB GetMagicJWTResponse where
  parseJSONPB =
    ( HsJSONPB.withObject
        "GetMagicJWTResponse"
        ( \obj ->
            (Hs.pure GetMagicJWTResponse)
              <*> ( let parseResult parseObj =
                          Hs.msum
                            [ Hs.Just Hs.. GetMagicJWTResponseResultReason
                                <$> (HsJSONPB.parseField parseObj "reason"),
                              Hs.Just Hs.. GetMagicJWTResponseResultSuccessJwt
                                <$> (HsJSONPB.parseField parseObj "success_jwt"),
                              Hs.pure Hs.Nothing
                            ]
                     in ( (obj .: "result")
                            Hs.>>= (HsJSONPB.withObject "result" parseResult)
                        )
                          <|> (parseResult obj)
                  )
        )
    )

instance HsJSONPB.ToJSON GetMagicJWTResponse where
  toJSON = HsJSONPB.toAesonValue
  toEncoding = HsJSONPB.toAesonEncoding

instance HsJSONPB.FromJSON GetMagicJWTResponse where
  parseJSON = HsJSONPB.parseJSONPB

data GetMagicJWTResponseResult
  = GetMagicJWTResponseResultReason Monocle.Protob.Jwt.Unauthorized
  | GetMagicJWTResponseResultSuccessJwt Monocle.Protob.Jwt.SuccessJWT
  deriving (Hs.Show, Hs.Eq, Hs.Ord, Hs.Generic, Hs.NFData)

instance HsProtobuf.Named GetMagicJWTResponseResult where
  nameOf _ = (Hs.fromString "GetMagicJWTResponseResult")
