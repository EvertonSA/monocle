{-# LANGUAGE DataKinds #-}
{-# LANGUAGE DeriveAnyClass #-}
{-# LANGUAGE DeriveGeneric #-}
{-# LANGUAGE GADTs #-}
{-# LANGUAGE OverloadedStrings #-}
{-# LANGUAGE TypeApplications #-}
{-# LANGUAGE NoGeneralisedNewtypeDeriving #-}
{-# OPTIONS_GHC -fno-warn-missing-export-lists #-}
{-# OPTIONS_GHC -fno-warn-name-shadowing #-}
{-# OPTIONS_GHC -fno-warn-unused-imports #-}
{-# OPTIONS_GHC -fno-warn-unused-matches #-}

-- | Generated by Haskell protocol buffer compiler. DO NOT EDIT!
module Monocle.Protob.Jwt where

import Control.Applicative ((<$>), (<*>), (<|>))
import qualified Control.Applicative as Hs
import qualified Control.DeepSeq as Hs
import qualified Control.Monad as Hs
import qualified Data.ByteString as Hs
import qualified Data.Coerce as Hs
import qualified Data.Int as Hs (Int16, Int32, Int64)
import qualified Data.List.NonEmpty as Hs (NonEmpty (..))
import qualified Data.Map as Hs (Map, mapKeysMonotonic)
import qualified Data.Proxy as Proxy
import qualified Data.String as Hs (fromString)
import qualified Data.Text.Lazy as Hs (Text)
import qualified Data.Vector as Hs (Vector)
import qualified Data.Word as Hs (Word16, Word32, Word64)
import qualified GHC.Enum as Hs
import qualified GHC.Generics as Hs
import qualified Proto3.Suite.Class as HsProtobuf
import qualified Proto3.Suite.DotProto as HsProtobuf
import Proto3.Suite.JSONPB ((.:), (.=))
import qualified Proto3.Suite.JSONPB as HsJSONPB
import qualified Proto3.Suite.Types as HsProtobuf
import qualified Proto3.Wire as HsProtobuf
import qualified Unsafe.Coerce as Hs
import qualified Prelude as Hs

newtype GetMagicJWTRequest = GetMagicJWTRequest
  { getMagicJWTRequestToken ::
      Hs.Text
  }
  deriving (Hs.Show, Hs.Eq, Hs.Ord, Hs.Generic, Hs.NFData)

instance HsProtobuf.Named GetMagicJWTRequest where
  nameOf _ = (Hs.fromString "GetMagicJWTRequest")

instance HsProtobuf.HasDefault GetMagicJWTRequest

instance HsProtobuf.Message GetMagicJWTRequest where
  encodeMessage
    _
    GetMagicJWTRequest
      { getMagicJWTRequestToken =
          getMagicJWTRequestToken
      } =
      ( Hs.mconcat
          [ ( HsProtobuf.encodeMessageField
                (HsProtobuf.FieldNumber 1)
                getMagicJWTRequestToken
            )
          ]
      )
  decodeMessage _ =
    (Hs.pure GetMagicJWTRequest)
      <*> ( HsProtobuf.at
              HsProtobuf.decodeMessageField
              (HsProtobuf.FieldNumber 1)
          )
  dotProto _ =
    [ ( HsProtobuf.DotProtoField
          (HsProtobuf.FieldNumber 1)
          (HsProtobuf.Prim HsProtobuf.String)
          (HsProtobuf.Single "token")
          []
          ""
      )
    ]

instance HsJSONPB.ToJSONPB GetMagicJWTRequest where
  toJSONPB (GetMagicJWTRequest f1) =
    (HsJSONPB.object ["token" .= f1])
  toEncodingPB (GetMagicJWTRequest f1) =
    (HsJSONPB.pairs ["token" .= f1])

instance HsJSONPB.FromJSONPB GetMagicJWTRequest where
  parseJSONPB =
    ( HsJSONPB.withObject
        "GetMagicJWTRequest"
        (\obj -> (Hs.pure GetMagicJWTRequest) <*> obj .: "token")
    )

instance HsJSONPB.ToJSON GetMagicJWTRequest where
  toJSON = HsJSONPB.toAesonValue
  toEncoding = HsJSONPB.toAesonEncoding

instance HsJSONPB.FromJSON GetMagicJWTRequest where
  parseJSON = HsJSONPB.parseJSONPB

data GetMagicJWTError
  = GetMagicJWTErrorInvalidAdminToken
  | GetMagicJWTErrorMagicTokenDisabled
  | GetMagicJWTErrorMagicTokenCreateError
  deriving (Hs.Show, Hs.Eq, Hs.Generic, Hs.NFData)

instance HsProtobuf.Named GetMagicJWTError where
  nameOf _ = (Hs.fromString "GetMagicJWTError")

instance HsProtobuf.HasDefault GetMagicJWTError

instance Hs.Bounded GetMagicJWTError where
  minBound = GetMagicJWTErrorInvalidAdminToken
  maxBound = GetMagicJWTErrorMagicTokenCreateError

instance Hs.Ord GetMagicJWTError where
  compare x y =
    Hs.compare
      (HsProtobuf.fromProtoEnum x)
      (HsProtobuf.fromProtoEnum y)

instance HsProtobuf.ProtoEnum GetMagicJWTError where
  toProtoEnumMay 0 = Hs.Just GetMagicJWTErrorInvalidAdminToken
  toProtoEnumMay 1 = Hs.Just GetMagicJWTErrorMagicTokenDisabled
  toProtoEnumMay 2 = Hs.Just GetMagicJWTErrorMagicTokenCreateError
  toProtoEnumMay _ = Hs.Nothing
  fromProtoEnum (GetMagicJWTErrorInvalidAdminToken) = 0
  fromProtoEnum (GetMagicJWTErrorMagicTokenDisabled) = 1
  fromProtoEnum (GetMagicJWTErrorMagicTokenCreateError) = 2

instance HsJSONPB.ToJSONPB GetMagicJWTError where
  toJSONPB x _ = HsJSONPB.enumFieldString x
  toEncodingPB x _ = HsJSONPB.enumFieldEncoding x

instance HsJSONPB.FromJSONPB GetMagicJWTError where
  parseJSONPB (HsJSONPB.String "InvalidAdminToken") =
    Hs.pure GetMagicJWTErrorInvalidAdminToken
  parseJSONPB (HsJSONPB.String "MagicTokenDisabled") =
    Hs.pure GetMagicJWTErrorMagicTokenDisabled
  parseJSONPB (HsJSONPB.String "MagicTokenCreateError") =
    Hs.pure GetMagicJWTErrorMagicTokenCreateError
  parseJSONPB v = (HsJSONPB.typeMismatch "GetMagicJWTError" v)

instance HsJSONPB.ToJSON GetMagicJWTError where
  toJSON = HsJSONPB.toAesonValue
  toEncoding = HsJSONPB.toAesonEncoding

instance HsJSONPB.FromJSON GetMagicJWTError where
  parseJSON = HsJSONPB.parseJSONPB

instance HsProtobuf.Finite GetMagicJWTError

newtype GetMagicJWTResponse = GetMagicJWTResponse
  { getMagicJWTResponseResult ::
      Hs.Maybe GetMagicJWTResponseResult
  }
  deriving (Hs.Show, Hs.Eq, Hs.Ord, Hs.Generic, Hs.NFData)

instance HsProtobuf.Named GetMagicJWTResponse where
  nameOf _ = (Hs.fromString "GetMagicJWTResponse")

instance HsProtobuf.HasDefault GetMagicJWTResponse

instance HsProtobuf.Message GetMagicJWTResponse where
  encodeMessage
    _
    GetMagicJWTResponse
      { getMagicJWTResponseResult =
          getMagicJWTResponseResult
      } =
      ( Hs.mconcat
          [ case getMagicJWTResponseResult of
              Hs.Nothing -> Hs.mempty
              Hs.Just x ->
                case x of
                  GetMagicJWTResponseResultError y ->
                    ( HsProtobuf.encodeMessageField
                        (HsProtobuf.FieldNumber 1)
                        (HsProtobuf.ForceEmit y)
                    )
                  GetMagicJWTResponseResultJwt y ->
                    ( HsProtobuf.encodeMessageField
                        (HsProtobuf.FieldNumber 2)
                        (HsProtobuf.ForceEmit y)
                    )
          ]
      )
  decodeMessage _ =
    (Hs.pure GetMagicJWTResponse)
      <*> ( HsProtobuf.oneof
              Hs.Nothing
              [ ( (HsProtobuf.FieldNumber 1),
                  (Hs.pure (Hs.Just Hs.. GetMagicJWTResponseResultError))
                    <*> HsProtobuf.decodeMessageField
                ),
                ( (HsProtobuf.FieldNumber 2),
                  (Hs.pure (Hs.Just Hs.. GetMagicJWTResponseResultJwt))
                    <*> HsProtobuf.decodeMessageField
                )
              ]
          )
  dotProto _ = []

instance HsJSONPB.ToJSONPB GetMagicJWTResponse where
  toJSONPB (GetMagicJWTResponse f1_or_f2) =
    ( HsJSONPB.object
        [ ( let encodeResult =
                  ( case f1_or_f2 of
                      Hs.Just (GetMagicJWTResponseResultError f1) ->
                        (HsJSONPB.pair "error" f1)
                      Hs.Just (GetMagicJWTResponseResultJwt f2) ->
                        (HsJSONPB.pair "jwt" f2)
                      Hs.Nothing -> Hs.mempty
                  )
             in \options ->
                  if HsJSONPB.optEmitNamedOneof options
                    then
                      ("result" .= (HsJSONPB.objectOrNull [encodeResult] options))
                        options
                    else encodeResult options
          )
        ]
    )
  toEncodingPB (GetMagicJWTResponse f1_or_f2) =
    ( HsJSONPB.pairs
        [ ( let encodeResult =
                  ( case f1_or_f2 of
                      Hs.Just (GetMagicJWTResponseResultError f1) ->
                        (HsJSONPB.pair "error" f1)
                      Hs.Just (GetMagicJWTResponseResultJwt f2) ->
                        (HsJSONPB.pair "jwt" f2)
                      Hs.Nothing -> Hs.mempty
                  )
             in \options ->
                  if HsJSONPB.optEmitNamedOneof options
                    then ("result" .= (HsJSONPB.pairsOrNull [encodeResult] options)) options
                    else encodeResult options
          )
        ]
    )

instance HsJSONPB.FromJSONPB GetMagicJWTResponse where
  parseJSONPB =
    ( HsJSONPB.withObject
        "GetMagicJWTResponse"
        ( \obj ->
            (Hs.pure GetMagicJWTResponse)
              <*> ( let parseResult parseObj =
                          Hs.msum
                            [ Hs.Just Hs.. GetMagicJWTResponseResultError
                                <$> (HsJSONPB.parseField parseObj "error"),
                              Hs.Just Hs.. GetMagicJWTResponseResultJwt
                                <$> (HsJSONPB.parseField parseObj "jwt"),
                              Hs.pure Hs.Nothing
                            ]
                     in ( (obj .: "result")
                            Hs.>>= (HsJSONPB.withObject "result" parseResult)
                        )
                          <|> (parseResult obj)
                  )
        )
    )

instance HsJSONPB.ToJSON GetMagicJWTResponse where
  toJSON = HsJSONPB.toAesonValue
  toEncoding = HsJSONPB.toAesonEncoding

instance HsJSONPB.FromJSON GetMagicJWTResponse where
  parseJSON = HsJSONPB.parseJSONPB

data GetMagicJWTResponseResult
  = GetMagicJWTResponseResultError
      ( HsProtobuf.Enumerated
          Monocle.Protob.Jwt.GetMagicJWTError
      )
  | GetMagicJWTResponseResultJwt Hs.Text
  deriving (Hs.Show, Hs.Eq, Hs.Ord, Hs.Generic, Hs.NFData)

instance HsProtobuf.Named GetMagicJWTResponseResult where
  nameOf _ = (Hs.fromString "GetMagicJWTResponseResult")
