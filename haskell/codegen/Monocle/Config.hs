{-# LANGUAGE DataKinds #-}
{-# LANGUAGE DeriveAnyClass #-}
{-# LANGUAGE DeriveGeneric #-}
{-# LANGUAGE GADTs #-}
{-# LANGUAGE OverloadedStrings #-}
{-# LANGUAGE TypeApplications #-}
{-# LANGUAGE NoGeneralisedNewtypeDeriving #-}
{-# OPTIONS_GHC -fno-warn-missing-export-lists #-}
{-# OPTIONS_GHC -fno-warn-name-shadowing #-}
{-# OPTIONS_GHC -fno-warn-unused-imports #-}
{-# OPTIONS_GHC -fno-warn-unused-matches #-}

-- | Generated by Haskell protocol buffer compiler. DO NOT EDIT!
module Monocle.Config where

import Control.Applicative ((<$>), (<*>), (<|>))
import qualified Control.Applicative as Hs
import qualified Control.DeepSeq as Hs
import qualified Control.Monad as Hs
import qualified Data.ByteString as Hs
import qualified Data.Coerce as Hs
import qualified Data.Int as Hs (Int16, Int32, Int64)
import qualified Data.List.NonEmpty as Hs (NonEmpty (..))
import qualified Data.Map as Hs (Map, mapKeysMonotonic)
import qualified Data.Proxy as Proxy
import qualified Data.String as Hs (fromString)
import qualified Data.Text.Lazy as Hs (Text)
import qualified Data.Vector as Hs (Vector)
import qualified Data.Word as Hs (Word16, Word32, Word64)
import qualified GHC.Enum as Hs
import qualified GHC.Generics as Hs
import qualified Proto3.Suite.Class as HsProtobuf
import qualified Proto3.Suite.DotProto as HsProtobuf
import Proto3.Suite.JSONPB ((.:), (.=))
import qualified Proto3.Suite.JSONPB as HsJSONPB
import qualified Proto3.Suite.Types as HsProtobuf
import qualified Proto3.Wire as HsProtobuf
import qualified Unsafe.Coerce as Hs
import qualified Prelude as Hs

data ProjectDefinition = ProjectDefinition
  { projectDefinitionName ::
      Hs.Text,
    projectDefinitionRepositoryRegex :: Hs.Text,
    projectDefinitionBranchRegex :: Hs.Text,
    projectDefinitionFileRegex :: Hs.Text
  }
  deriving (Hs.Show, Hs.Eq, Hs.Ord, Hs.Generic, Hs.NFData)

instance HsProtobuf.Named ProjectDefinition where
  nameOf _ = (Hs.fromString "ProjectDefinition")

instance HsProtobuf.HasDefault ProjectDefinition

instance HsProtobuf.Message ProjectDefinition where
  encodeMessage
    _
    ProjectDefinition
      { projectDefinitionName = projectDefinitionName,
        projectDefinitionRepositoryRegex =
          projectDefinitionRepositoryRegex,
        projectDefinitionBranchRegex = projectDefinitionBranchRegex,
        projectDefinitionFileRegex = projectDefinitionFileRegex
      } =
      ( Hs.mconcat
          [ ( HsProtobuf.encodeMessageField
                (HsProtobuf.FieldNumber 1)
                projectDefinitionName
            ),
            ( HsProtobuf.encodeMessageField
                (HsProtobuf.FieldNumber 2)
                projectDefinitionRepositoryRegex
            ),
            ( HsProtobuf.encodeMessageField
                (HsProtobuf.FieldNumber 3)
                projectDefinitionBranchRegex
            ),
            ( HsProtobuf.encodeMessageField
                (HsProtobuf.FieldNumber 4)
                projectDefinitionFileRegex
            )
          ]
      )
  decodeMessage _ =
    (Hs.pure ProjectDefinition)
      <*> ( HsProtobuf.at
              HsProtobuf.decodeMessageField
              (HsProtobuf.FieldNumber 1)
          )
      <*> ( HsProtobuf.at
              HsProtobuf.decodeMessageField
              (HsProtobuf.FieldNumber 2)
          )
      <*> ( HsProtobuf.at
              HsProtobuf.decodeMessageField
              (HsProtobuf.FieldNumber 3)
          )
      <*> ( HsProtobuf.at
              HsProtobuf.decodeMessageField
              (HsProtobuf.FieldNumber 4)
          )
  dotProto _ =
    [ ( HsProtobuf.DotProtoField
          (HsProtobuf.FieldNumber 1)
          (HsProtobuf.Prim HsProtobuf.String)
          (HsProtobuf.Single "name")
          []
          ""
      ),
      ( HsProtobuf.DotProtoField
          (HsProtobuf.FieldNumber 2)
          (HsProtobuf.Prim HsProtobuf.String)
          (HsProtobuf.Single "repository_regex")
          []
          ""
      ),
      ( HsProtobuf.DotProtoField
          (HsProtobuf.FieldNumber 3)
          (HsProtobuf.Prim HsProtobuf.String)
          (HsProtobuf.Single "branch_regex")
          []
          ""
      ),
      ( HsProtobuf.DotProtoField
          (HsProtobuf.FieldNumber 4)
          (HsProtobuf.Prim HsProtobuf.String)
          (HsProtobuf.Single "file_regex")
          []
          ""
      )
    ]

instance HsJSONPB.ToJSONPB ProjectDefinition where
  toJSONPB (ProjectDefinition f1 f2 f3 f4) =
    ( HsJSONPB.object
        [ "name" .= f1,
          "repository_regex" .= f2,
          "branch_regex" .= f3,
          "file_regex" .= f4
        ]
    )
  toEncodingPB (ProjectDefinition f1 f2 f3 f4) =
    ( HsJSONPB.pairs
        [ "name" .= f1,
          "repository_regex" .= f2,
          "branch_regex" .= f3,
          "file_regex" .= f4
        ]
    )

instance HsJSONPB.FromJSONPB ProjectDefinition where
  parseJSONPB =
    ( HsJSONPB.withObject
        "ProjectDefinition"
        ( \obj ->
            (Hs.pure ProjectDefinition) <*> obj .: "name"
              <*> obj .: "repository_regex"
              <*> obj .: "branch_regex"
              <*> obj .: "file_regex"
        )
    )

instance HsJSONPB.ToJSON ProjectDefinition where
  toJSON = HsJSONPB.toAesonValue
  toEncoding = HsJSONPB.toAesonEncoding

instance HsJSONPB.FromJSON ProjectDefinition where
  parseJSON = HsJSONPB.parseJSONPB

instance HsJSONPB.ToSchema ProjectDefinition where
  declareNamedSchema _ =
    do
      let declare_name = HsJSONPB.declareSchemaRef
      projectDefinitionName <- declare_name Proxy.Proxy
      let declare_repository_regex = HsJSONPB.declareSchemaRef
      projectDefinitionRepositoryRegex <-
        declare_repository_regex
          Proxy.Proxy
      let declare_branch_regex = HsJSONPB.declareSchemaRef
      projectDefinitionBranchRegex <- declare_branch_regex Proxy.Proxy
      let declare_file_regex = HsJSONPB.declareSchemaRef
      projectDefinitionFileRegex <- declare_file_regex Proxy.Proxy
      let _ =
            Hs.pure ProjectDefinition <*> HsJSONPB.asProxy declare_name
              <*> HsJSONPB.asProxy declare_repository_regex
              <*> HsJSONPB.asProxy declare_branch_regex
              <*> HsJSONPB.asProxy declare_file_regex
      Hs.return
        ( HsJSONPB.NamedSchema
            { HsJSONPB._namedSchemaName =
                Hs.Just "ProjectDefinition",
              HsJSONPB._namedSchemaSchema =
                Hs.mempty
                  { HsJSONPB._schemaParamSchema =
                      Hs.mempty
                        { HsJSONPB._paramSchemaType =
                            Hs.Just HsJSONPB.SwaggerObject
                        },
                    HsJSONPB._schemaProperties =
                      HsJSONPB.insOrdFromList
                        [ ("name", projectDefinitionName),
                          ( "repository_regex",
                            projectDefinitionRepositoryRegex
                          ),
                          ( "branch_regex",
                            projectDefinitionBranchRegex
                          ),
                          ( "file_regex",
                            projectDefinitionFileRegex
                          )
                        ]
                  }
            }
        )

newtype GetProjectsRequest = GetProjectsRequest
  { getProjectsRequestIndex ::
      Hs.Text
  }
  deriving (Hs.Show, Hs.Eq, Hs.Ord, Hs.Generic, Hs.NFData)

instance HsProtobuf.Named GetProjectsRequest where
  nameOf _ = (Hs.fromString "GetProjectsRequest")

instance HsProtobuf.HasDefault GetProjectsRequest

instance HsProtobuf.Message GetProjectsRequest where
  encodeMessage
    _
    GetProjectsRequest
      { getProjectsRequestIndex =
          getProjectsRequestIndex
      } =
      ( Hs.mconcat
          [ ( HsProtobuf.encodeMessageField
                (HsProtobuf.FieldNumber 1)
                getProjectsRequestIndex
            )
          ]
      )
  decodeMessage _ =
    (Hs.pure GetProjectsRequest)
      <*> ( HsProtobuf.at
              HsProtobuf.decodeMessageField
              (HsProtobuf.FieldNumber 1)
          )
  dotProto _ =
    [ ( HsProtobuf.DotProtoField
          (HsProtobuf.FieldNumber 1)
          (HsProtobuf.Prim HsProtobuf.String)
          (HsProtobuf.Single "index")
          []
          ""
      )
    ]

instance HsJSONPB.ToJSONPB GetProjectsRequest where
  toJSONPB (GetProjectsRequest f1) =
    (HsJSONPB.object ["index" .= f1])
  toEncodingPB (GetProjectsRequest f1) =
    (HsJSONPB.pairs ["index" .= f1])

instance HsJSONPB.FromJSONPB GetProjectsRequest where
  parseJSONPB =
    ( HsJSONPB.withObject
        "GetProjectsRequest"
        (\obj -> (Hs.pure GetProjectsRequest) <*> obj .: "index")
    )

instance HsJSONPB.ToJSON GetProjectsRequest where
  toJSON = HsJSONPB.toAesonValue
  toEncoding = HsJSONPB.toAesonEncoding

instance HsJSONPB.FromJSON GetProjectsRequest where
  parseJSON = HsJSONPB.parseJSONPB

instance HsJSONPB.ToSchema GetProjectsRequest where
  declareNamedSchema _ =
    do
      let declare_index = HsJSONPB.declareSchemaRef
      getProjectsRequestIndex <- declare_index Proxy.Proxy
      let _ =
            Hs.pure GetProjectsRequest
              <*> HsJSONPB.asProxy declare_index
      Hs.return
        ( HsJSONPB.NamedSchema
            { HsJSONPB._namedSchemaName =
                Hs.Just "GetProjectsRequest",
              HsJSONPB._namedSchemaSchema =
                Hs.mempty
                  { HsJSONPB._schemaParamSchema =
                      Hs.mempty
                        { HsJSONPB._paramSchemaType =
                            Hs.Just HsJSONPB.SwaggerObject
                        },
                    HsJSONPB._schemaProperties =
                      HsJSONPB.insOrdFromList
                        [("index", getProjectsRequestIndex)]
                  }
            }
        )

newtype GetProjectsResponse = GetProjectsResponse
  { getProjectsResponseProjects ::
      Hs.Vector Monocle.Config.ProjectDefinition
  }
  deriving (Hs.Show, Hs.Eq, Hs.Ord, Hs.Generic, Hs.NFData)

instance HsProtobuf.Named GetProjectsResponse where
  nameOf _ = (Hs.fromString "GetProjectsResponse")

instance HsProtobuf.HasDefault GetProjectsResponse

instance HsProtobuf.Message GetProjectsResponse where
  encodeMessage
    _
    GetProjectsResponse
      { getProjectsResponseProjects =
          getProjectsResponseProjects
      } =
      ( Hs.mconcat
          [ ( HsProtobuf.encodeMessageField
                (HsProtobuf.FieldNumber 1)
                ( Hs.coerce @(Hs.Vector Monocle.Config.ProjectDefinition)
                    @(HsProtobuf.NestedVec Monocle.Config.ProjectDefinition)
                    getProjectsResponseProjects
                )
            )
          ]
      )
  decodeMessage _ =
    (Hs.pure GetProjectsResponse)
      <*> ( Hs.coerce
              @(_ (HsProtobuf.NestedVec Monocle.Config.ProjectDefinition))
              @(_ (Hs.Vector Monocle.Config.ProjectDefinition))
              ( HsProtobuf.at
                  HsProtobuf.decodeMessageField
                  (HsProtobuf.FieldNumber 1)
              )
          )
  dotProto _ =
    [ ( HsProtobuf.DotProtoField
          (HsProtobuf.FieldNumber 1)
          ( HsProtobuf.Repeated
              (HsProtobuf.Named (HsProtobuf.Single "ProjectDefinition"))
          )
          (HsProtobuf.Single "projects")
          []
          ""
      )
    ]

instance HsJSONPB.ToJSONPB GetProjectsResponse where
  toJSONPB (GetProjectsResponse f1) =
    (HsJSONPB.object ["projects" .= f1])
  toEncodingPB (GetProjectsResponse f1) =
    (HsJSONPB.pairs ["projects" .= f1])

instance HsJSONPB.FromJSONPB GetProjectsResponse where
  parseJSONPB =
    ( HsJSONPB.withObject
        "GetProjectsResponse"
        (\obj -> (Hs.pure GetProjectsResponse) <*> obj .: "projects")
    )

instance HsJSONPB.ToJSON GetProjectsResponse where
  toJSON = HsJSONPB.toAesonValue
  toEncoding = HsJSONPB.toAesonEncoding

instance HsJSONPB.FromJSON GetProjectsResponse where
  parseJSON = HsJSONPB.parseJSONPB

instance HsJSONPB.ToSchema GetProjectsResponse where
  declareNamedSchema _ =
    do
      let declare_projects = HsJSONPB.declareSchemaRef
      getProjectsResponseProjects <- declare_projects Proxy.Proxy
      let _ =
            Hs.pure GetProjectsResponse
              <*> HsJSONPB.asProxy declare_projects
      Hs.return
        ( HsJSONPB.NamedSchema
            { HsJSONPB._namedSchemaName =
                Hs.Just "GetProjectsResponse",
              HsJSONPB._namedSchemaSchema =
                Hs.mempty
                  { HsJSONPB._schemaParamSchema =
                      Hs.mempty
                        { HsJSONPB._paramSchemaType =
                            Hs.Just HsJSONPB.SwaggerObject
                        },
                    HsJSONPB._schemaProperties =
                      HsJSONPB.insOrdFromList
                        [ ( "projects",
                            getProjectsResponseProjects
                          )
                        ]
                  }
            }
        )

newtype Workspace = Workspace {workspaceName :: Hs.Text}
  deriving (Hs.Show, Hs.Eq, Hs.Ord, Hs.Generic, Hs.NFData)

instance HsProtobuf.Named Workspace where
  nameOf _ = (Hs.fromString "Workspace")

instance HsProtobuf.HasDefault Workspace

instance HsProtobuf.Message Workspace where
  encodeMessage _ Workspace {workspaceName = workspaceName} =
    ( Hs.mconcat
        [ ( HsProtobuf.encodeMessageField
              (HsProtobuf.FieldNumber 1)
              workspaceName
          )
        ]
    )
  decodeMessage _ =
    (Hs.pure Workspace)
      <*> ( HsProtobuf.at
              HsProtobuf.decodeMessageField
              (HsProtobuf.FieldNumber 1)
          )
  dotProto _ =
    [ ( HsProtobuf.DotProtoField
          (HsProtobuf.FieldNumber 1)
          (HsProtobuf.Prim HsProtobuf.String)
          (HsProtobuf.Single "name")
          []
          ""
      )
    ]

instance HsJSONPB.ToJSONPB Workspace where
  toJSONPB (Workspace f1) = (HsJSONPB.object ["name" .= f1])
  toEncodingPB (Workspace f1) = (HsJSONPB.pairs ["name" .= f1])

instance HsJSONPB.FromJSONPB Workspace where
  parseJSONPB =
    ( HsJSONPB.withObject
        "Workspace"
        (\obj -> (Hs.pure Workspace) <*> obj .: "name")
    )

instance HsJSONPB.ToJSON Workspace where
  toJSON = HsJSONPB.toAesonValue
  toEncoding = HsJSONPB.toAesonEncoding

instance HsJSONPB.FromJSON Workspace where
  parseJSON = HsJSONPB.parseJSONPB

instance HsJSONPB.ToSchema Workspace where
  declareNamedSchema _ =
    do
      let declare_name = HsJSONPB.declareSchemaRef
      workspaceName <- declare_name Proxy.Proxy
      let _ = Hs.pure Workspace <*> HsJSONPB.asProxy declare_name
      Hs.return
        ( HsJSONPB.NamedSchema
            { HsJSONPB._namedSchemaName =
                Hs.Just "Workspace",
              HsJSONPB._namedSchemaSchema =
                Hs.mempty
                  { HsJSONPB._schemaParamSchema =
                      Hs.mempty
                        { HsJSONPB._paramSchemaType =
                            Hs.Just HsJSONPB.SwaggerObject
                        },
                    HsJSONPB._schemaProperties =
                      HsJSONPB.insOrdFromList
                        [("name", workspaceName)]
                  }
            }
        )

newtype GetWorkspacesRequest = GetWorkspacesRequest
  { getWorkspacesRequestVoid ::
      Hs.Text
  }
  deriving (Hs.Show, Hs.Eq, Hs.Ord, Hs.Generic, Hs.NFData)

instance HsProtobuf.Named GetWorkspacesRequest where
  nameOf _ = (Hs.fromString "GetWorkspacesRequest")

instance HsProtobuf.HasDefault GetWorkspacesRequest

instance HsProtobuf.Message GetWorkspacesRequest where
  encodeMessage
    _
    GetWorkspacesRequest
      { getWorkspacesRequestVoid =
          getWorkspacesRequestVoid
      } =
      ( Hs.mconcat
          [ ( HsProtobuf.encodeMessageField
                (HsProtobuf.FieldNumber 1)
                getWorkspacesRequestVoid
            )
          ]
      )
  decodeMessage _ =
    (Hs.pure GetWorkspacesRequest)
      <*> ( HsProtobuf.at
              HsProtobuf.decodeMessageField
              (HsProtobuf.FieldNumber 1)
          )
  dotProto _ =
    [ ( HsProtobuf.DotProtoField
          (HsProtobuf.FieldNumber 1)
          (HsProtobuf.Prim HsProtobuf.String)
          (HsProtobuf.Single "void")
          []
          ""
      )
    ]

instance HsJSONPB.ToJSONPB GetWorkspacesRequest where
  toJSONPB (GetWorkspacesRequest f1) =
    (HsJSONPB.object ["void" .= f1])
  toEncodingPB (GetWorkspacesRequest f1) =
    (HsJSONPB.pairs ["void" .= f1])

instance HsJSONPB.FromJSONPB GetWorkspacesRequest where
  parseJSONPB =
    ( HsJSONPB.withObject
        "GetWorkspacesRequest"
        (\obj -> (Hs.pure GetWorkspacesRequest) <*> obj .: "void")
    )

instance HsJSONPB.ToJSON GetWorkspacesRequest where
  toJSON = HsJSONPB.toAesonValue
  toEncoding = HsJSONPB.toAesonEncoding

instance HsJSONPB.FromJSON GetWorkspacesRequest where
  parseJSON = HsJSONPB.parseJSONPB

instance HsJSONPB.ToSchema GetWorkspacesRequest where
  declareNamedSchema _ =
    do
      let declare_void = HsJSONPB.declareSchemaRef
      getWorkspacesRequestVoid <- declare_void Proxy.Proxy
      let _ =
            Hs.pure GetWorkspacesRequest
              <*> HsJSONPB.asProxy declare_void
      Hs.return
        ( HsJSONPB.NamedSchema
            { HsJSONPB._namedSchemaName =
                Hs.Just "GetWorkspacesRequest",
              HsJSONPB._namedSchemaSchema =
                Hs.mempty
                  { HsJSONPB._schemaParamSchema =
                      Hs.mempty
                        { HsJSONPB._paramSchemaType =
                            Hs.Just HsJSONPB.SwaggerObject
                        },
                    HsJSONPB._schemaProperties =
                      HsJSONPB.insOrdFromList
                        [("void", getWorkspacesRequestVoid)]
                  }
            }
        )

newtype GetWorkspacesResponse = GetWorkspacesResponse
  { getWorkspacesResponseWorkspaces ::
      Hs.Vector Monocle.Config.Workspace
  }
  deriving (Hs.Show, Hs.Eq, Hs.Ord, Hs.Generic, Hs.NFData)

instance HsProtobuf.Named GetWorkspacesResponse where
  nameOf _ = (Hs.fromString "GetWorkspacesResponse")

instance HsProtobuf.HasDefault GetWorkspacesResponse

instance HsProtobuf.Message GetWorkspacesResponse where
  encodeMessage
    _
    GetWorkspacesResponse
      { getWorkspacesResponseWorkspaces =
          getWorkspacesResponseWorkspaces
      } =
      ( Hs.mconcat
          [ ( HsProtobuf.encodeMessageField
                (HsProtobuf.FieldNumber 1)
                ( Hs.coerce @(Hs.Vector Monocle.Config.Workspace)
                    @(HsProtobuf.NestedVec Monocle.Config.Workspace)
                    getWorkspacesResponseWorkspaces
                )
            )
          ]
      )
  decodeMessage _ =
    (Hs.pure GetWorkspacesResponse)
      <*> ( Hs.coerce @(_ (HsProtobuf.NestedVec Monocle.Config.Workspace))
              @(_ (Hs.Vector Monocle.Config.Workspace))
              ( HsProtobuf.at
                  HsProtobuf.decodeMessageField
                  (HsProtobuf.FieldNumber 1)
              )
          )
  dotProto _ =
    [ ( HsProtobuf.DotProtoField
          (HsProtobuf.FieldNumber 1)
          ( HsProtobuf.Repeated
              (HsProtobuf.Named (HsProtobuf.Single "Workspace"))
          )
          (HsProtobuf.Single "workspaces")
          []
          ""
      )
    ]

instance HsJSONPB.ToJSONPB GetWorkspacesResponse where
  toJSONPB (GetWorkspacesResponse f1) =
    (HsJSONPB.object ["workspaces" .= f1])
  toEncodingPB (GetWorkspacesResponse f1) =
    (HsJSONPB.pairs ["workspaces" .= f1])

instance HsJSONPB.FromJSONPB GetWorkspacesResponse where
  parseJSONPB =
    ( HsJSONPB.withObject
        "GetWorkspacesResponse"
        (\obj -> (Hs.pure GetWorkspacesResponse) <*> obj .: "workspaces")
    )

instance HsJSONPB.ToJSON GetWorkspacesResponse where
  toJSON = HsJSONPB.toAesonValue
  toEncoding = HsJSONPB.toAesonEncoding

instance HsJSONPB.FromJSON GetWorkspacesResponse where
  parseJSON = HsJSONPB.parseJSONPB

instance HsJSONPB.ToSchema GetWorkspacesResponse where
  declareNamedSchema _ =
    do
      let declare_workspaces = HsJSONPB.declareSchemaRef
      getWorkspacesResponseWorkspaces <- declare_workspaces Proxy.Proxy
      let _ =
            Hs.pure GetWorkspacesResponse
              <*> HsJSONPB.asProxy declare_workspaces
      Hs.return
        ( HsJSONPB.NamedSchema
            { HsJSONPB._namedSchemaName =
                Hs.Just "GetWorkspacesResponse",
              HsJSONPB._namedSchemaSchema =
                Hs.mempty
                  { HsJSONPB._schemaParamSchema =
                      Hs.mempty
                        { HsJSONPB._paramSchemaType =
                            Hs.Just HsJSONPB.SwaggerObject
                        },
                    HsJSONPB._schemaProperties =
                      HsJSONPB.insOrdFromList
                        [ ( "workspaces",
                            getWorkspacesResponseWorkspaces
                          )
                        ]
                  }
            }
        )

data About = About
  { aboutVersion :: Hs.Text,
    aboutLinks :: Hs.Vector Monocle.Config.About_AboutLink
  }
  deriving (Hs.Show, Hs.Eq, Hs.Ord, Hs.Generic, Hs.NFData)

instance HsProtobuf.Named About where
  nameOf _ = (Hs.fromString "About")

instance HsProtobuf.HasDefault About

instance HsProtobuf.Message About where
  encodeMessage
    _
    About {aboutVersion = aboutVersion, aboutLinks = aboutLinks} =
      ( Hs.mconcat
          [ ( HsProtobuf.encodeMessageField
                (HsProtobuf.FieldNumber 1)
                aboutVersion
            ),
            ( HsProtobuf.encodeMessageField
                (HsProtobuf.FieldNumber 2)
                ( Hs.coerce @(Hs.Vector Monocle.Config.About_AboutLink)
                    @(HsProtobuf.NestedVec Monocle.Config.About_AboutLink)
                    aboutLinks
                )
            )
          ]
      )
  decodeMessage _ =
    (Hs.pure About)
      <*> ( HsProtobuf.at
              HsProtobuf.decodeMessageField
              (HsProtobuf.FieldNumber 1)
          )
      <*> ( Hs.coerce
              @(_ (HsProtobuf.NestedVec Monocle.Config.About_AboutLink))
              @(_ (Hs.Vector Monocle.Config.About_AboutLink))
              ( HsProtobuf.at
                  HsProtobuf.decodeMessageField
                  (HsProtobuf.FieldNumber 2)
              )
          )
  dotProto _ =
    [ ( HsProtobuf.DotProtoField
          (HsProtobuf.FieldNumber 1)
          (HsProtobuf.Prim HsProtobuf.String)
          (HsProtobuf.Single "version")
          []
          ""
      ),
      ( HsProtobuf.DotProtoField
          (HsProtobuf.FieldNumber 2)
          ( HsProtobuf.Repeated
              (HsProtobuf.Named (HsProtobuf.Single "AboutLink"))
          )
          (HsProtobuf.Single "links")
          []
          ""
      )
    ]

instance HsJSONPB.ToJSONPB About where
  toJSONPB (About f1 f2) =
    (HsJSONPB.object ["version" .= f1, "links" .= f2])
  toEncodingPB (About f1 f2) =
    (HsJSONPB.pairs ["version" .= f1, "links" .= f2])

instance HsJSONPB.FromJSONPB About where
  parseJSONPB =
    ( HsJSONPB.withObject
        "About"
        (\obj -> (Hs.pure About) <*> obj .: "version" <*> obj .: "links")
    )

instance HsJSONPB.ToJSON About where
  toJSON = HsJSONPB.toAesonValue
  toEncoding = HsJSONPB.toAesonEncoding

instance HsJSONPB.FromJSON About where
  parseJSON = HsJSONPB.parseJSONPB

instance HsJSONPB.ToSchema About where
  declareNamedSchema _ =
    do
      let declare_version = HsJSONPB.declareSchemaRef
      aboutVersion <- declare_version Proxy.Proxy
      let declare_links = HsJSONPB.declareSchemaRef
      aboutLinks <- declare_links Proxy.Proxy
      let _ =
            Hs.pure About <*> HsJSONPB.asProxy declare_version
              <*> HsJSONPB.asProxy declare_links
      Hs.return
        ( HsJSONPB.NamedSchema
            { HsJSONPB._namedSchemaName = Hs.Just "About",
              HsJSONPB._namedSchemaSchema =
                Hs.mempty
                  { HsJSONPB._schemaParamSchema =
                      Hs.mempty
                        { HsJSONPB._paramSchemaType =
                            Hs.Just HsJSONPB.SwaggerObject
                        },
                    HsJSONPB._schemaProperties =
                      HsJSONPB.insOrdFromList
                        [ ("version", aboutVersion),
                          ("links", aboutLinks)
                        ]
                  }
            }
        )

data About_AboutLink = About_AboutLink
  { about_AboutLinkName ::
      Hs.Text,
    about_AboutLinkUrl :: Hs.Text,
    about_AboutLinkCategory :: Hs.Text
  }
  deriving (Hs.Show, Hs.Eq, Hs.Ord, Hs.Generic, Hs.NFData)

instance HsProtobuf.Named About_AboutLink where
  nameOf _ = (Hs.fromString "About_AboutLink")

instance HsProtobuf.HasDefault About_AboutLink

instance HsProtobuf.Message About_AboutLink where
  encodeMessage
    _
    About_AboutLink
      { about_AboutLinkName = about_AboutLinkName,
        about_AboutLinkUrl = about_AboutLinkUrl,
        about_AboutLinkCategory = about_AboutLinkCategory
      } =
      ( Hs.mconcat
          [ ( HsProtobuf.encodeMessageField
                (HsProtobuf.FieldNumber 1)
                about_AboutLinkName
            ),
            ( HsProtobuf.encodeMessageField
                (HsProtobuf.FieldNumber 2)
                about_AboutLinkUrl
            ),
            ( HsProtobuf.encodeMessageField
                (HsProtobuf.FieldNumber 3)
                about_AboutLinkCategory
            )
          ]
      )
  decodeMessage _ =
    (Hs.pure About_AboutLink)
      <*> ( HsProtobuf.at
              HsProtobuf.decodeMessageField
              (HsProtobuf.FieldNumber 1)
          )
      <*> ( HsProtobuf.at
              HsProtobuf.decodeMessageField
              (HsProtobuf.FieldNumber 2)
          )
      <*> ( HsProtobuf.at
              HsProtobuf.decodeMessageField
              (HsProtobuf.FieldNumber 3)
          )
  dotProto _ =
    [ ( HsProtobuf.DotProtoField
          (HsProtobuf.FieldNumber 1)
          (HsProtobuf.Prim HsProtobuf.String)
          (HsProtobuf.Single "name")
          []
          ""
      ),
      ( HsProtobuf.DotProtoField
          (HsProtobuf.FieldNumber 2)
          (HsProtobuf.Prim HsProtobuf.String)
          (HsProtobuf.Single "url")
          []
          ""
      ),
      ( HsProtobuf.DotProtoField
          (HsProtobuf.FieldNumber 3)
          (HsProtobuf.Prim HsProtobuf.String)
          (HsProtobuf.Single "category")
          []
          ""
      )
    ]

instance HsJSONPB.ToJSONPB About_AboutLink where
  toJSONPB (About_AboutLink f1 f2 f3) =
    (HsJSONPB.object ["name" .= f1, "url" .= f2, "category" .= f3])
  toEncodingPB (About_AboutLink f1 f2 f3) =
    (HsJSONPB.pairs ["name" .= f1, "url" .= f2, "category" .= f3])

instance HsJSONPB.FromJSONPB About_AboutLink where
  parseJSONPB =
    ( HsJSONPB.withObject
        "About_AboutLink"
        ( \obj ->
            (Hs.pure About_AboutLink) <*> obj .: "name" <*> obj .: "url"
              <*> obj .: "category"
        )
    )

instance HsJSONPB.ToJSON About_AboutLink where
  toJSON = HsJSONPB.toAesonValue
  toEncoding = HsJSONPB.toAesonEncoding

instance HsJSONPB.FromJSON About_AboutLink where
  parseJSON = HsJSONPB.parseJSONPB

instance HsJSONPB.ToSchema About_AboutLink where
  declareNamedSchema _ =
    do
      let declare_name = HsJSONPB.declareSchemaRef
      about_AboutLinkName <- declare_name Proxy.Proxy
      let declare_url = HsJSONPB.declareSchemaRef
      about_AboutLinkUrl <- declare_url Proxy.Proxy
      let declare_category = HsJSONPB.declareSchemaRef
      about_AboutLinkCategory <- declare_category Proxy.Proxy
      let _ =
            Hs.pure About_AboutLink <*> HsJSONPB.asProxy declare_name
              <*> HsJSONPB.asProxy declare_url
              <*> HsJSONPB.asProxy declare_category
      Hs.return
        ( HsJSONPB.NamedSchema
            { HsJSONPB._namedSchemaName =
                Hs.Just "About_AboutLink",
              HsJSONPB._namedSchemaSchema =
                Hs.mempty
                  { HsJSONPB._schemaParamSchema =
                      Hs.mempty
                        { HsJSONPB._paramSchemaType =
                            Hs.Just HsJSONPB.SwaggerObject
                        },
                    HsJSONPB._schemaProperties =
                      HsJSONPB.insOrdFromList
                        [ ("name", about_AboutLinkName),
                          ("url", about_AboutLinkUrl),
                          ("category", about_AboutLinkCategory)
                        ]
                  }
            }
        )

newtype GetAboutRequest = GetAboutRequest
  { getAboutRequestVoid ::
      Hs.Text
  }
  deriving (Hs.Show, Hs.Eq, Hs.Ord, Hs.Generic, Hs.NFData)

instance HsProtobuf.Named GetAboutRequest where
  nameOf _ = (Hs.fromString "GetAboutRequest")

instance HsProtobuf.HasDefault GetAboutRequest

instance HsProtobuf.Message GetAboutRequest where
  encodeMessage
    _
    GetAboutRequest {getAboutRequestVoid = getAboutRequestVoid} =
      ( Hs.mconcat
          [ ( HsProtobuf.encodeMessageField
                (HsProtobuf.FieldNumber 1)
                getAboutRequestVoid
            )
          ]
      )
  decodeMessage _ =
    (Hs.pure GetAboutRequest)
      <*> ( HsProtobuf.at
              HsProtobuf.decodeMessageField
              (HsProtobuf.FieldNumber 1)
          )
  dotProto _ =
    [ ( HsProtobuf.DotProtoField
          (HsProtobuf.FieldNumber 1)
          (HsProtobuf.Prim HsProtobuf.String)
          (HsProtobuf.Single "void")
          []
          ""
      )
    ]

instance HsJSONPB.ToJSONPB GetAboutRequest where
  toJSONPB (GetAboutRequest f1) = (HsJSONPB.object ["void" .= f1])
  toEncodingPB (GetAboutRequest f1) = (HsJSONPB.pairs ["void" .= f1])

instance HsJSONPB.FromJSONPB GetAboutRequest where
  parseJSONPB =
    ( HsJSONPB.withObject
        "GetAboutRequest"
        (\obj -> (Hs.pure GetAboutRequest) <*> obj .: "void")
    )

instance HsJSONPB.ToJSON GetAboutRequest where
  toJSON = HsJSONPB.toAesonValue
  toEncoding = HsJSONPB.toAesonEncoding

instance HsJSONPB.FromJSON GetAboutRequest where
  parseJSON = HsJSONPB.parseJSONPB

instance HsJSONPB.ToSchema GetAboutRequest where
  declareNamedSchema _ =
    do
      let declare_void = HsJSONPB.declareSchemaRef
      getAboutRequestVoid <- declare_void Proxy.Proxy
      let _ = Hs.pure GetAboutRequest <*> HsJSONPB.asProxy declare_void
      Hs.return
        ( HsJSONPB.NamedSchema
            { HsJSONPB._namedSchemaName =
                Hs.Just "GetAboutRequest",
              HsJSONPB._namedSchemaSchema =
                Hs.mempty
                  { HsJSONPB._schemaParamSchema =
                      Hs.mempty
                        { HsJSONPB._paramSchemaType =
                            Hs.Just HsJSONPB.SwaggerObject
                        },
                    HsJSONPB._schemaProperties =
                      HsJSONPB.insOrdFromList
                        [("void", getAboutRequestVoid)]
                  }
            }
        )

newtype GetAboutResponse = GetAboutResponse
  { getAboutResponseAbout ::
      Hs.Maybe Monocle.Config.About
  }
  deriving (Hs.Show, Hs.Eq, Hs.Ord, Hs.Generic, Hs.NFData)

instance HsProtobuf.Named GetAboutResponse where
  nameOf _ = (Hs.fromString "GetAboutResponse")

instance HsProtobuf.HasDefault GetAboutResponse

instance HsProtobuf.Message GetAboutResponse where
  encodeMessage
    _
    GetAboutResponse {getAboutResponseAbout = getAboutResponseAbout} =
      ( Hs.mconcat
          [ ( HsProtobuf.encodeMessageField
                (HsProtobuf.FieldNumber 1)
                ( Hs.coerce @(Hs.Maybe Monocle.Config.About)
                    @(HsProtobuf.Nested Monocle.Config.About)
                    getAboutResponseAbout
                )
            )
          ]
      )
  decodeMessage _ =
    (Hs.pure GetAboutResponse)
      <*> ( Hs.coerce @(_ (HsProtobuf.Nested Monocle.Config.About))
              @(_ (Hs.Maybe Monocle.Config.About))
              ( HsProtobuf.at
                  HsProtobuf.decodeMessageField
                  (HsProtobuf.FieldNumber 1)
              )
          )
  dotProto _ =
    [ ( HsProtobuf.DotProtoField
          (HsProtobuf.FieldNumber 1)
          (HsProtobuf.Prim (HsProtobuf.Named (HsProtobuf.Single "About")))
          (HsProtobuf.Single "about")
          []
          ""
      )
    ]

instance HsJSONPB.ToJSONPB GetAboutResponse where
  toJSONPB (GetAboutResponse f1) = (HsJSONPB.object ["about" .= f1])
  toEncodingPB (GetAboutResponse f1) =
    (HsJSONPB.pairs ["about" .= f1])

instance HsJSONPB.FromJSONPB GetAboutResponse where
  parseJSONPB =
    ( HsJSONPB.withObject
        "GetAboutResponse"
        (\obj -> (Hs.pure GetAboutResponse) <*> obj .: "about")
    )

instance HsJSONPB.ToJSON GetAboutResponse where
  toJSON = HsJSONPB.toAesonValue
  toEncoding = HsJSONPB.toAesonEncoding

instance HsJSONPB.FromJSON GetAboutResponse where
  parseJSON = HsJSONPB.parseJSONPB

instance HsJSONPB.ToSchema GetAboutResponse where
  declareNamedSchema _ =
    do
      let declare_about = HsJSONPB.declareSchemaRef
      getAboutResponseAbout <- declare_about Proxy.Proxy
      let _ = Hs.pure GetAboutResponse <*> HsJSONPB.asProxy declare_about
      Hs.return
        ( HsJSONPB.NamedSchema
            { HsJSONPB._namedSchemaName =
                Hs.Just "GetAboutResponse",
              HsJSONPB._namedSchemaSchema =
                Hs.mempty
                  { HsJSONPB._schemaParamSchema =
                      Hs.mempty
                        { HsJSONPB._paramSchemaType =
                            Hs.Just HsJSONPB.SwaggerObject
                        },
                    HsJSONPB._schemaProperties =
                      HsJSONPB.insOrdFromList
                        [("about", getAboutResponseAbout)]
                  }
            }
        )

data GroupDefinition = GroupDefinition
  { groupDefinitionName ::
      Hs.Text,
    groupDefinitionMembers :: Hs.Word32
  }
  deriving (Hs.Show, Hs.Eq, Hs.Ord, Hs.Generic, Hs.NFData)

instance HsProtobuf.Named GroupDefinition where
  nameOf _ = (Hs.fromString "GroupDefinition")

instance HsProtobuf.HasDefault GroupDefinition

instance HsProtobuf.Message GroupDefinition where
  encodeMessage
    _
    GroupDefinition
      { groupDefinitionName = groupDefinitionName,
        groupDefinitionMembers = groupDefinitionMembers
      } =
      ( Hs.mconcat
          [ ( HsProtobuf.encodeMessageField
                (HsProtobuf.FieldNumber 1)
                groupDefinitionName
            ),
            ( HsProtobuf.encodeMessageField
                (HsProtobuf.FieldNumber 2)
                groupDefinitionMembers
            )
          ]
      )
  decodeMessage _ =
    (Hs.pure GroupDefinition)
      <*> ( HsProtobuf.at
              HsProtobuf.decodeMessageField
              (HsProtobuf.FieldNumber 1)
          )
      <*> ( HsProtobuf.at
              HsProtobuf.decodeMessageField
              (HsProtobuf.FieldNumber 2)
          )
  dotProto _ =
    [ ( HsProtobuf.DotProtoField
          (HsProtobuf.FieldNumber 1)
          (HsProtobuf.Prim HsProtobuf.String)
          (HsProtobuf.Single "name")
          []
          ""
      ),
      ( HsProtobuf.DotProtoField
          (HsProtobuf.FieldNumber 2)
          (HsProtobuf.Prim HsProtobuf.UInt32)
          (HsProtobuf.Single "members")
          []
          ""
      )
    ]

instance HsJSONPB.ToJSONPB GroupDefinition where
  toJSONPB (GroupDefinition f1 f2) =
    (HsJSONPB.object ["name" .= f1, "members" .= f2])
  toEncodingPB (GroupDefinition f1 f2) =
    (HsJSONPB.pairs ["name" .= f1, "members" .= f2])

instance HsJSONPB.FromJSONPB GroupDefinition where
  parseJSONPB =
    ( HsJSONPB.withObject
        "GroupDefinition"
        ( \obj ->
            (Hs.pure GroupDefinition) <*> obj .: "name" <*> obj .: "members"
        )
    )

instance HsJSONPB.ToJSON GroupDefinition where
  toJSON = HsJSONPB.toAesonValue
  toEncoding = HsJSONPB.toAesonEncoding

instance HsJSONPB.FromJSON GroupDefinition where
  parseJSON = HsJSONPB.parseJSONPB

instance HsJSONPB.ToSchema GroupDefinition where
  declareNamedSchema _ =
    do
      let declare_name = HsJSONPB.declareSchemaRef
      groupDefinitionName <- declare_name Proxy.Proxy
      let declare_members = HsJSONPB.declareSchemaRef
      groupDefinitionMembers <- declare_members Proxy.Proxy
      let _ =
            Hs.pure GroupDefinition <*> HsJSONPB.asProxy declare_name
              <*> HsJSONPB.asProxy declare_members
      Hs.return
        ( HsJSONPB.NamedSchema
            { HsJSONPB._namedSchemaName =
                Hs.Just "GroupDefinition",
              HsJSONPB._namedSchemaSchema =
                Hs.mempty
                  { HsJSONPB._schemaParamSchema =
                      Hs.mempty
                        { HsJSONPB._paramSchemaType =
                            Hs.Just HsJSONPB.SwaggerObject
                        },
                    HsJSONPB._schemaProperties =
                      HsJSONPB.insOrdFromList
                        [ ("name", groupDefinitionName),
                          ("members", groupDefinitionMembers)
                        ]
                  }
            }
        )

newtype GetGroupsRequest = GetGroupsRequest
  { getGroupsRequestIndex ::
      Hs.Text
  }
  deriving (Hs.Show, Hs.Eq, Hs.Ord, Hs.Generic, Hs.NFData)

instance HsProtobuf.Named GetGroupsRequest where
  nameOf _ = (Hs.fromString "GetGroupsRequest")

instance HsProtobuf.HasDefault GetGroupsRequest

instance HsProtobuf.Message GetGroupsRequest where
  encodeMessage
    _
    GetGroupsRequest {getGroupsRequestIndex = getGroupsRequestIndex} =
      ( Hs.mconcat
          [ ( HsProtobuf.encodeMessageField
                (HsProtobuf.FieldNumber 1)
                getGroupsRequestIndex
            )
          ]
      )
  decodeMessage _ =
    (Hs.pure GetGroupsRequest)
      <*> ( HsProtobuf.at
              HsProtobuf.decodeMessageField
              (HsProtobuf.FieldNumber 1)
          )
  dotProto _ =
    [ ( HsProtobuf.DotProtoField
          (HsProtobuf.FieldNumber 1)
          (HsProtobuf.Prim HsProtobuf.String)
          (HsProtobuf.Single "index")
          []
          ""
      )
    ]

instance HsJSONPB.ToJSONPB GetGroupsRequest where
  toJSONPB (GetGroupsRequest f1) = (HsJSONPB.object ["index" .= f1])
  toEncodingPB (GetGroupsRequest f1) =
    (HsJSONPB.pairs ["index" .= f1])

instance HsJSONPB.FromJSONPB GetGroupsRequest where
  parseJSONPB =
    ( HsJSONPB.withObject
        "GetGroupsRequest"
        (\obj -> (Hs.pure GetGroupsRequest) <*> obj .: "index")
    )

instance HsJSONPB.ToJSON GetGroupsRequest where
  toJSON = HsJSONPB.toAesonValue
  toEncoding = HsJSONPB.toAesonEncoding

instance HsJSONPB.FromJSON GetGroupsRequest where
  parseJSON = HsJSONPB.parseJSONPB

instance HsJSONPB.ToSchema GetGroupsRequest where
  declareNamedSchema _ =
    do
      let declare_index = HsJSONPB.declareSchemaRef
      getGroupsRequestIndex <- declare_index Proxy.Proxy
      let _ = Hs.pure GetGroupsRequest <*> HsJSONPB.asProxy declare_index
      Hs.return
        ( HsJSONPB.NamedSchema
            { HsJSONPB._namedSchemaName =
                Hs.Just "GetGroupsRequest",
              HsJSONPB._namedSchemaSchema =
                Hs.mempty
                  { HsJSONPB._schemaParamSchema =
                      Hs.mempty
                        { HsJSONPB._paramSchemaType =
                            Hs.Just HsJSONPB.SwaggerObject
                        },
                    HsJSONPB._schemaProperties =
                      HsJSONPB.insOrdFromList
                        [("index", getGroupsRequestIndex)]
                  }
            }
        )

newtype GetGroupsResponse = GetGroupsResponse
  { getGroupsResponseItems ::
      Hs.Vector Monocle.Config.GroupDefinition
  }
  deriving (Hs.Show, Hs.Eq, Hs.Ord, Hs.Generic, Hs.NFData)

instance HsProtobuf.Named GetGroupsResponse where
  nameOf _ = (Hs.fromString "GetGroupsResponse")

instance HsProtobuf.HasDefault GetGroupsResponse

instance HsProtobuf.Message GetGroupsResponse where
  encodeMessage
    _
    GetGroupsResponse {getGroupsResponseItems = getGroupsResponseItems} =
      ( Hs.mconcat
          [ ( HsProtobuf.encodeMessageField
                (HsProtobuf.FieldNumber 1)
                ( Hs.coerce @(Hs.Vector Monocle.Config.GroupDefinition)
                    @(HsProtobuf.NestedVec Monocle.Config.GroupDefinition)
                    getGroupsResponseItems
                )
            )
          ]
      )
  decodeMessage _ =
    (Hs.pure GetGroupsResponse)
      <*> ( Hs.coerce
              @(_ (HsProtobuf.NestedVec Monocle.Config.GroupDefinition))
              @(_ (Hs.Vector Monocle.Config.GroupDefinition))
              ( HsProtobuf.at
                  HsProtobuf.decodeMessageField
                  (HsProtobuf.FieldNumber 1)
              )
          )
  dotProto _ =
    [ ( HsProtobuf.DotProtoField
          (HsProtobuf.FieldNumber 1)
          ( HsProtobuf.Repeated
              (HsProtobuf.Named (HsProtobuf.Single "GroupDefinition"))
          )
          (HsProtobuf.Single "items")
          []
          ""
      )
    ]

instance HsJSONPB.ToJSONPB GetGroupsResponse where
  toJSONPB (GetGroupsResponse f1) = (HsJSONPB.object ["items" .= f1])
  toEncodingPB (GetGroupsResponse f1) =
    (HsJSONPB.pairs ["items" .= f1])

instance HsJSONPB.FromJSONPB GetGroupsResponse where
  parseJSONPB =
    ( HsJSONPB.withObject
        "GetGroupsResponse"
        (\obj -> (Hs.pure GetGroupsResponse) <*> obj .: "items")
    )

instance HsJSONPB.ToJSON GetGroupsResponse where
  toJSON = HsJSONPB.toAesonValue
  toEncoding = HsJSONPB.toAesonEncoding

instance HsJSONPB.FromJSON GetGroupsResponse where
  parseJSON = HsJSONPB.parseJSONPB

instance HsJSONPB.ToSchema GetGroupsResponse where
  declareNamedSchema _ =
    do
      let declare_items = HsJSONPB.declareSchemaRef
      getGroupsResponseItems <- declare_items Proxy.Proxy
      let _ =
            Hs.pure GetGroupsResponse
              <*> HsJSONPB.asProxy declare_items
      Hs.return
        ( HsJSONPB.NamedSchema
            { HsJSONPB._namedSchemaName =
                Hs.Just "GetGroupsResponse",
              HsJSONPB._namedSchemaSchema =
                Hs.mempty
                  { HsJSONPB._schemaParamSchema =
                      Hs.mempty
                        { HsJSONPB._paramSchemaType =
                            Hs.Just HsJSONPB.SwaggerObject
                        },
                    HsJSONPB._schemaProperties =
                      HsJSONPB.insOrdFromList
                        [("items", getGroupsResponseItems)]
                  }
            }
        )
