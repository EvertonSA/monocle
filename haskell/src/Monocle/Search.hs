{-# LANGUAGE DataKinds #-}
{-# LANGUAGE DeriveAnyClass #-}
{-# LANGUAGE DeriveGeneric #-}
{-# LANGUAGE GADTs #-}
{-# LANGUAGE OverloadedStrings #-}
{-# LANGUAGE TypeApplications #-}
{-# OPTIONS_GHC -fno-warn-name-shadowing #-}
{-# OPTIONS_GHC -fno-warn-unused-imports #-}
{-# OPTIONS_GHC -fno-warn-unused-matches #-}

-- | Generated by Haskell protocol buffer compiler. DO NOT EDIT!
module Monocle.Search where

import Control.Applicative ((<$>), (<*>), (<|>))
import qualified Control.Applicative as Hs
import qualified Control.DeepSeq as Hs
import qualified Control.Monad as Hs
import qualified Data.ByteString as Hs
import qualified Data.Coerce as Hs
import qualified Data.Int as Hs (Int16, Int32, Int64)
import qualified Data.List.NonEmpty as Hs (NonEmpty (..))
import qualified Data.Map as Hs (Map, mapKeysMonotonic)
import qualified Data.Proxy as Proxy
import qualified Data.String as Hs (fromString)
import qualified Data.Text.Lazy as Hs (Text)
import qualified Data.Vector as Hs (Vector)
import qualified Data.Word as Hs (Word16, Word32, Word64)
import qualified GHC.Enum as Hs
import qualified GHC.Generics as Hs
import qualified Google.Protobuf.Timestamp
import qualified Proto3.Suite.Class as HsProtobuf
import qualified Proto3.Suite.DotProto as HsProtobuf
import Proto3.Suite.JSONPB ((.:), (.=))
import qualified Proto3.Suite.JSONPB as HsJSONPB
import qualified Proto3.Suite.Types as HsProtobuf
import qualified Proto3.Wire as HsProtobuf
import qualified Unsafe.Coerce as Hs
import qualified Prelude as Hs

newtype SearchSuggestionsRequest = SearchSuggestionsRequest
  { searchSuggestionsRequestIndex ::
      Hs.Text
  }
  deriving (Hs.Show, Hs.Eq, Hs.Ord, Hs.Generic, Hs.NFData)

instance HsProtobuf.Named SearchSuggestionsRequest where
  nameOf _ = (Hs.fromString "SearchSuggestionsRequest")

instance HsProtobuf.HasDefault SearchSuggestionsRequest

instance HsProtobuf.Message SearchSuggestionsRequest where
  encodeMessage
    _
    SearchSuggestionsRequest
      { searchSuggestionsRequestIndex =
          searchSuggestionsRequestIndex
      } =
      ( Hs.mconcat
          [ ( HsProtobuf.encodeMessageField
                (HsProtobuf.FieldNumber 1)
                searchSuggestionsRequestIndex
            )
          ]
      )
  decodeMessage _ =
    (Hs.pure SearchSuggestionsRequest)
      <*> ( HsProtobuf.at
              HsProtobuf.decodeMessageField
              (HsProtobuf.FieldNumber 1)
          )
  dotProto _ =
    [ ( HsProtobuf.DotProtoField
          (HsProtobuf.FieldNumber 1)
          (HsProtobuf.Prim HsProtobuf.String)
          (HsProtobuf.Single "index")
          []
          ""
      )
    ]

instance HsJSONPB.ToJSONPB SearchSuggestionsRequest where
  toJSONPB (SearchSuggestionsRequest f1) =
    (HsJSONPB.object ["index" .= f1])
  toEncodingPB (SearchSuggestionsRequest f1) =
    (HsJSONPB.pairs ["index" .= f1])

instance HsJSONPB.FromJSONPB SearchSuggestionsRequest where
  parseJSONPB =
    ( HsJSONPB.withObject
        "SearchSuggestionsRequest"
        (\obj -> (Hs.pure SearchSuggestionsRequest) <*> obj .: "index")
    )

instance HsJSONPB.ToJSON SearchSuggestionsRequest where
  toJSON = HsJSONPB.toAesonValue
  toEncoding = HsJSONPB.toAesonEncoding

instance HsJSONPB.FromJSON SearchSuggestionsRequest where
  parseJSON = HsJSONPB.parseJSONPB

instance HsJSONPB.ToSchema SearchSuggestionsRequest where
  declareNamedSchema _ =
    do
      let declare_index = HsJSONPB.declareSchemaRef
      searchSuggestionsRequestIndex <- declare_index Proxy.Proxy
      let _ =
            Hs.pure SearchSuggestionsRequest
              <*> HsJSONPB.asProxy declare_index
      Hs.return
        ( HsJSONPB.NamedSchema
            { HsJSONPB._namedSchemaName =
                Hs.Just "SearchSuggestionsRequest",
              HsJSONPB._namedSchemaSchema =
                Hs.mempty
                  { HsJSONPB._schemaParamSchema =
                      Hs.mempty
                        { HsJSONPB._paramSchemaType =
                            Hs.Just HsJSONPB.SwaggerObject
                        },
                    HsJSONPB._schemaProperties =
                      HsJSONPB.insOrdFromList
                        [("index", searchSuggestionsRequestIndex)]
                  }
            }
        )

data SearchSuggestionsResponse = SearchSuggestionsResponse
  { searchSuggestionsResponseTaskTypes ::
      Hs.Vector Hs.Text,
    searchSuggestionsResponseAuthors ::
      Hs.Vector Hs.Text,
    searchSuggestionsResponseApprovals ::
      Hs.Vector Hs.Text,
    searchSuggestionsResponsePriorities ::
      Hs.Vector Hs.Text,
    searchSuggestionsResponseSeverities ::
      Hs.Vector Hs.Text
  }
  deriving (Hs.Show, Hs.Eq, Hs.Ord, Hs.Generic, Hs.NFData)

instance HsProtobuf.Named SearchSuggestionsResponse where
  nameOf _ = (Hs.fromString "SearchSuggestionsResponse")

instance HsProtobuf.HasDefault SearchSuggestionsResponse

instance HsProtobuf.Message SearchSuggestionsResponse where
  encodeMessage
    _
    SearchSuggestionsResponse
      { searchSuggestionsResponseTaskTypes =
          searchSuggestionsResponseTaskTypes,
        searchSuggestionsResponseAuthors =
          searchSuggestionsResponseAuthors,
        searchSuggestionsResponseApprovals =
          searchSuggestionsResponseApprovals,
        searchSuggestionsResponsePriorities =
          searchSuggestionsResponsePriorities,
        searchSuggestionsResponseSeverities =
          searchSuggestionsResponseSeverities
      } =
      ( Hs.mconcat
          [ ( HsProtobuf.encodeMessageField
                (HsProtobuf.FieldNumber 1)
                ( Hs.coerce @(Hs.Vector Hs.Text) @(HsProtobuf.UnpackedVec Hs.Text)
                    searchSuggestionsResponseTaskTypes
                )
            ),
            ( HsProtobuf.encodeMessageField
                (HsProtobuf.FieldNumber 2)
                ( Hs.coerce @(Hs.Vector Hs.Text) @(HsProtobuf.UnpackedVec Hs.Text)
                    searchSuggestionsResponseAuthors
                )
            ),
            ( HsProtobuf.encodeMessageField
                (HsProtobuf.FieldNumber 3)
                ( Hs.coerce @(Hs.Vector Hs.Text) @(HsProtobuf.UnpackedVec Hs.Text)
                    searchSuggestionsResponseApprovals
                )
            ),
            ( HsProtobuf.encodeMessageField
                (HsProtobuf.FieldNumber 4)
                ( Hs.coerce @(Hs.Vector Hs.Text) @(HsProtobuf.UnpackedVec Hs.Text)
                    searchSuggestionsResponsePriorities
                )
            ),
            ( HsProtobuf.encodeMessageField
                (HsProtobuf.FieldNumber 5)
                ( Hs.coerce @(Hs.Vector Hs.Text) @(HsProtobuf.UnpackedVec Hs.Text)
                    searchSuggestionsResponseSeverities
                )
            )
          ]
      )
  decodeMessage _ =
    (Hs.pure SearchSuggestionsResponse)
      <*> ( Hs.coerce @(_ (HsProtobuf.UnpackedVec Hs.Text))
              @(_ (Hs.Vector Hs.Text))
              ( HsProtobuf.at
                  HsProtobuf.decodeMessageField
                  (HsProtobuf.FieldNumber 1)
              )
          )
      <*> ( Hs.coerce @(_ (HsProtobuf.UnpackedVec Hs.Text))
              @(_ (Hs.Vector Hs.Text))
              ( HsProtobuf.at
                  HsProtobuf.decodeMessageField
                  (HsProtobuf.FieldNumber 2)
              )
          )
      <*> ( Hs.coerce @(_ (HsProtobuf.UnpackedVec Hs.Text))
              @(_ (Hs.Vector Hs.Text))
              ( HsProtobuf.at
                  HsProtobuf.decodeMessageField
                  (HsProtobuf.FieldNumber 3)
              )
          )
      <*> ( Hs.coerce @(_ (HsProtobuf.UnpackedVec Hs.Text))
              @(_ (Hs.Vector Hs.Text))
              ( HsProtobuf.at
                  HsProtobuf.decodeMessageField
                  (HsProtobuf.FieldNumber 4)
              )
          )
      <*> ( Hs.coerce @(_ (HsProtobuf.UnpackedVec Hs.Text))
              @(_ (Hs.Vector Hs.Text))
              ( HsProtobuf.at
                  HsProtobuf.decodeMessageField
                  (HsProtobuf.FieldNumber 5)
              )
          )
  dotProto _ =
    [ ( HsProtobuf.DotProtoField
          (HsProtobuf.FieldNumber 1)
          (HsProtobuf.Repeated HsProtobuf.String)
          (HsProtobuf.Single "task_types")
          []
          ""
      ),
      ( HsProtobuf.DotProtoField
          (HsProtobuf.FieldNumber 2)
          (HsProtobuf.Repeated HsProtobuf.String)
          (HsProtobuf.Single "authors")
          []
          ""
      ),
      ( HsProtobuf.DotProtoField
          (HsProtobuf.FieldNumber 3)
          (HsProtobuf.Repeated HsProtobuf.String)
          (HsProtobuf.Single "approvals")
          []
          ""
      ),
      ( HsProtobuf.DotProtoField
          (HsProtobuf.FieldNumber 4)
          (HsProtobuf.Repeated HsProtobuf.String)
          (HsProtobuf.Single "priorities")
          []
          ""
      ),
      ( HsProtobuf.DotProtoField
          (HsProtobuf.FieldNumber 5)
          (HsProtobuf.Repeated HsProtobuf.String)
          (HsProtobuf.Single "severities")
          []
          ""
      )
    ]

instance HsJSONPB.ToJSONPB SearchSuggestionsResponse where
  toJSONPB (SearchSuggestionsResponse f1 f2 f3 f4 f5) =
    ( HsJSONPB.object
        [ "task_types" .= f1,
          "authors" .= f2,
          "approvals" .= f3,
          "priorities" .= f4,
          "severities" .= f5
        ]
    )
  toEncodingPB (SearchSuggestionsResponse f1 f2 f3 f4 f5) =
    ( HsJSONPB.pairs
        [ "task_types" .= f1,
          "authors" .= f2,
          "approvals" .= f3,
          "priorities" .= f4,
          "severities" .= f5
        ]
    )

instance HsJSONPB.FromJSONPB SearchSuggestionsResponse where
  parseJSONPB =
    ( HsJSONPB.withObject
        "SearchSuggestionsResponse"
        ( \obj ->
            (Hs.pure SearchSuggestionsResponse) <*> obj .: "task_types"
              <*> obj .: "authors"
              <*> obj .: "approvals"
              <*> obj .: "priorities"
              <*> obj .: "severities"
        )
    )

instance HsJSONPB.ToJSON SearchSuggestionsResponse where
  toJSON = HsJSONPB.toAesonValue
  toEncoding = HsJSONPB.toAesonEncoding

instance HsJSONPB.FromJSON SearchSuggestionsResponse where
  parseJSON = HsJSONPB.parseJSONPB

instance HsJSONPB.ToSchema SearchSuggestionsResponse where
  declareNamedSchema _ =
    do
      let declare_task_types = HsJSONPB.declareSchemaRef
      searchSuggestionsResponseTaskTypes <-
        declare_task_types
          Proxy.Proxy
      let declare_authors = HsJSONPB.declareSchemaRef
      searchSuggestionsResponseAuthors <- declare_authors Proxy.Proxy
      let declare_approvals = HsJSONPB.declareSchemaRef
      searchSuggestionsResponseApprovals <- declare_approvals Proxy.Proxy
      let declare_priorities = HsJSONPB.declareSchemaRef
      searchSuggestionsResponsePriorities <-
        declare_priorities
          Proxy.Proxy
      let declare_severities = HsJSONPB.declareSchemaRef
      searchSuggestionsResponseSeverities <-
        declare_severities
          Proxy.Proxy
      let _ =
            Hs.pure SearchSuggestionsResponse
              <*> HsJSONPB.asProxy declare_task_types
              <*> HsJSONPB.asProxy declare_authors
              <*> HsJSONPB.asProxy declare_approvals
              <*> HsJSONPB.asProxy declare_priorities
              <*> HsJSONPB.asProxy declare_severities
      Hs.return
        ( HsJSONPB.NamedSchema
            { HsJSONPB._namedSchemaName =
                Hs.Just "SearchSuggestionsResponse",
              HsJSONPB._namedSchemaSchema =
                Hs.mempty
                  { HsJSONPB._schemaParamSchema =
                      Hs.mempty
                        { HsJSONPB._paramSchemaType =
                            Hs.Just HsJSONPB.SwaggerObject
                        },
                    HsJSONPB._schemaProperties =
                      HsJSONPB.insOrdFromList
                        [ ( "task_types",
                            searchSuggestionsResponseTaskTypes
                          ),
                          ( "authors",
                            searchSuggestionsResponseAuthors
                          ),
                          ( "approvals",
                            searchSuggestionsResponseApprovals
                          ),
                          ( "priorities",
                            searchSuggestionsResponsePriorities
                          ),
                          ( "severities",
                            searchSuggestionsResponseSeverities
                          )
                        ]
                  }
            }
        )

newtype FieldsRequest = FieldsRequest
  { fieldsRequestVersion ::
      Hs.Text
  }
  deriving (Hs.Show, Hs.Eq, Hs.Ord, Hs.Generic, Hs.NFData)

instance HsProtobuf.Named FieldsRequest where
  nameOf _ = (Hs.fromString "FieldsRequest")

instance HsProtobuf.HasDefault FieldsRequest

instance HsProtobuf.Message FieldsRequest where
  encodeMessage
    _
    FieldsRequest {fieldsRequestVersion = fieldsRequestVersion} =
      ( Hs.mconcat
          [ ( HsProtobuf.encodeMessageField
                (HsProtobuf.FieldNumber 1)
                fieldsRequestVersion
            )
          ]
      )
  decodeMessage _ =
    (Hs.pure FieldsRequest)
      <*> ( HsProtobuf.at
              HsProtobuf.decodeMessageField
              (HsProtobuf.FieldNumber 1)
          )
  dotProto _ =
    [ ( HsProtobuf.DotProtoField
          (HsProtobuf.FieldNumber 1)
          (HsProtobuf.Prim HsProtobuf.String)
          (HsProtobuf.Single "version")
          []
          ""
      )
    ]

instance HsJSONPB.ToJSONPB FieldsRequest where
  toJSONPB (FieldsRequest f1) = (HsJSONPB.object ["version" .= f1])
  toEncodingPB (FieldsRequest f1) =
    (HsJSONPB.pairs ["version" .= f1])

instance HsJSONPB.FromJSONPB FieldsRequest where
  parseJSONPB =
    ( HsJSONPB.withObject
        "FieldsRequest"
        (\obj -> (Hs.pure FieldsRequest) <*> obj .: "version")
    )

instance HsJSONPB.ToJSON FieldsRequest where
  toJSON = HsJSONPB.toAesonValue
  toEncoding = HsJSONPB.toAesonEncoding

instance HsJSONPB.FromJSON FieldsRequest where
  parseJSON = HsJSONPB.parseJSONPB

instance HsJSONPB.ToSchema FieldsRequest where
  declareNamedSchema _ =
    do
      let declare_version = HsJSONPB.declareSchemaRef
      fieldsRequestVersion <- declare_version Proxy.Proxy
      let _ = Hs.pure FieldsRequest <*> HsJSONPB.asProxy declare_version
      Hs.return
        ( HsJSONPB.NamedSchema
            { HsJSONPB._namedSchemaName =
                Hs.Just "FieldsRequest",
              HsJSONPB._namedSchemaSchema =
                Hs.mempty
                  { HsJSONPB._schemaParamSchema =
                      Hs.mempty
                        { HsJSONPB._paramSchemaType =
                            Hs.Just HsJSONPB.SwaggerObject
                        },
                    HsJSONPB._schemaProperties =
                      HsJSONPB.insOrdFromList
                        [("version", fieldsRequestVersion)]
                  }
            }
        )

data Field = Field
  { fieldName :: Hs.Text,
    fieldDescription :: Hs.Text,
    fieldType :: HsProtobuf.Enumerated Monocle.Search.Field_Type
  }
  deriving (Hs.Show, Hs.Eq, Hs.Ord, Hs.Generic, Hs.NFData)

instance HsProtobuf.Named Field where
  nameOf _ = (Hs.fromString "Field")

instance HsProtobuf.HasDefault Field

instance HsProtobuf.Message Field where
  encodeMessage
    _
    Field
      { fieldName = fieldName,
        fieldDescription = fieldDescription,
        fieldType = fieldType
      } =
      ( Hs.mconcat
          [ ( HsProtobuf.encodeMessageField
                (HsProtobuf.FieldNumber 1)
                fieldName
            ),
            ( HsProtobuf.encodeMessageField
                (HsProtobuf.FieldNumber 2)
                fieldDescription
            ),
            ( HsProtobuf.encodeMessageField
                (HsProtobuf.FieldNumber 3)
                fieldType
            )
          ]
      )
  decodeMessage _ =
    (Hs.pure Field)
      <*> ( HsProtobuf.at
              HsProtobuf.decodeMessageField
              (HsProtobuf.FieldNumber 1)
          )
      <*> ( HsProtobuf.at
              HsProtobuf.decodeMessageField
              (HsProtobuf.FieldNumber 2)
          )
      <*> ( HsProtobuf.at
              HsProtobuf.decodeMessageField
              (HsProtobuf.FieldNumber 3)
          )
  dotProto _ =
    [ ( HsProtobuf.DotProtoField
          (HsProtobuf.FieldNumber 1)
          (HsProtobuf.Prim HsProtobuf.String)
          (HsProtobuf.Single "name")
          []
          ""
      ),
      ( HsProtobuf.DotProtoField
          (HsProtobuf.FieldNumber 2)
          (HsProtobuf.Prim HsProtobuf.String)
          (HsProtobuf.Single "description")
          []
          ""
      ),
      ( HsProtobuf.DotProtoField
          (HsProtobuf.FieldNumber 3)
          (HsProtobuf.Prim (HsProtobuf.Named (HsProtobuf.Single "Type")))
          (HsProtobuf.Single "type")
          []
          ""
      )
    ]

instance HsJSONPB.ToJSONPB Field where
  toJSONPB (Field f1 f2 f3) =
    ( HsJSONPB.object
        ["name" .= f1, "description" .= f2, "type" .= f3]
    )
  toEncodingPB (Field f1 f2 f3) =
    ( HsJSONPB.pairs
        ["name" .= f1, "description" .= f2, "type" .= f3]
    )

instance HsJSONPB.FromJSONPB Field where
  parseJSONPB =
    ( HsJSONPB.withObject
        "Field"
        ( \obj ->
            (Hs.pure Field) <*> obj .: "name" <*> obj .: "description"
              <*> obj .: "type"
        )
    )

instance HsJSONPB.ToJSON Field where
  toJSON = HsJSONPB.toAesonValue
  toEncoding = HsJSONPB.toAesonEncoding

instance HsJSONPB.FromJSON Field where
  parseJSON = HsJSONPB.parseJSONPB

instance HsJSONPB.ToSchema Field where
  declareNamedSchema _ =
    do
      let declare_name = HsJSONPB.declareSchemaRef
      fieldName <- declare_name Proxy.Proxy
      let declare_description = HsJSONPB.declareSchemaRef
      fieldDescription <- declare_description Proxy.Proxy
      let declare_type = HsJSONPB.declareSchemaRef
      fieldType <- declare_type Proxy.Proxy
      let _ =
            Hs.pure Field <*> HsJSONPB.asProxy declare_name
              <*> HsJSONPB.asProxy declare_description
              <*> HsJSONPB.asProxy declare_type
      Hs.return
        ( HsJSONPB.NamedSchema
            { HsJSONPB._namedSchemaName = Hs.Just "Field",
              HsJSONPB._namedSchemaSchema =
                Hs.mempty
                  { HsJSONPB._schemaParamSchema =
                      Hs.mempty
                        { HsJSONPB._paramSchemaType =
                            Hs.Just HsJSONPB.SwaggerObject
                        },
                    HsJSONPB._schemaProperties =
                      HsJSONPB.insOrdFromList
                        [ ("name", fieldName),
                          ("description", fieldDescription),
                          ("type", fieldType)
                        ]
                  }
            }
        )

data Field_Type
  = Field_TypeFIELD_DATE
  | Field_TypeFIELD_NUMBER
  | Field_TypeFIELD_TEXT
  | Field_TypeFIELD_BOOL
  | Field_TypeFIELD_REGEX
  deriving (Hs.Show, Hs.Eq, Hs.Generic, Hs.NFData)

instance HsProtobuf.Named Field_Type where
  nameOf _ = (Hs.fromString "Field_Type")

instance HsProtobuf.HasDefault Field_Type

instance Hs.Bounded Field_Type where
  minBound = Field_TypeFIELD_DATE
  maxBound = Field_TypeFIELD_REGEX

instance Hs.Ord Field_Type where
  compare x y =
    Hs.compare
      (HsProtobuf.fromProtoEnum x)
      (HsProtobuf.fromProtoEnum y)

instance HsProtobuf.ProtoEnum Field_Type where
  toProtoEnumMay 0 = Hs.Just Field_TypeFIELD_DATE
  toProtoEnumMay 1 = Hs.Just Field_TypeFIELD_NUMBER
  toProtoEnumMay 2 = Hs.Just Field_TypeFIELD_TEXT
  toProtoEnumMay 3 = Hs.Just Field_TypeFIELD_BOOL
  toProtoEnumMay 4 = Hs.Just Field_TypeFIELD_REGEX
  toProtoEnumMay _ = Hs.Nothing
  fromProtoEnum (Field_TypeFIELD_DATE) = 0
  fromProtoEnum (Field_TypeFIELD_NUMBER) = 1
  fromProtoEnum (Field_TypeFIELD_TEXT) = 2
  fromProtoEnum (Field_TypeFIELD_BOOL) = 3
  fromProtoEnum (Field_TypeFIELD_REGEX) = 4

instance HsJSONPB.ToJSONPB Field_Type where
  toJSONPB x _ = HsJSONPB.enumFieldString x
  toEncodingPB x _ = HsJSONPB.enumFieldEncoding x

instance HsJSONPB.FromJSONPB Field_Type where
  parseJSONPB (HsJSONPB.String "FIELD_DATE") =
    Hs.pure Field_TypeFIELD_DATE
  parseJSONPB (HsJSONPB.String "FIELD_NUMBER") =
    Hs.pure Field_TypeFIELD_NUMBER
  parseJSONPB (HsJSONPB.String "FIELD_TEXT") =
    Hs.pure Field_TypeFIELD_TEXT
  parseJSONPB (HsJSONPB.String "FIELD_BOOL") =
    Hs.pure Field_TypeFIELD_BOOL
  parseJSONPB (HsJSONPB.String "FIELD_REGEX") =
    Hs.pure Field_TypeFIELD_REGEX
  parseJSONPB v = (HsJSONPB.typeMismatch "Field_Type" v)

instance HsJSONPB.ToJSON Field_Type where
  toJSON = HsJSONPB.toAesonValue
  toEncoding = HsJSONPB.toAesonEncoding

instance HsJSONPB.FromJSON Field_Type where
  parseJSON = HsJSONPB.parseJSONPB

instance HsProtobuf.Finite Field_Type

newtype FieldsResponse = FieldsResponse
  { fieldsResponseFields ::
      Hs.Vector Monocle.Search.Field
  }
  deriving (Hs.Show, Hs.Eq, Hs.Ord, Hs.Generic, Hs.NFData)

instance HsProtobuf.Named FieldsResponse where
  nameOf _ = (Hs.fromString "FieldsResponse")

instance HsProtobuf.HasDefault FieldsResponse

instance HsProtobuf.Message FieldsResponse where
  encodeMessage
    _
    FieldsResponse {fieldsResponseFields = fieldsResponseFields} =
      ( Hs.mconcat
          [ ( HsProtobuf.encodeMessageField
                (HsProtobuf.FieldNumber 1)
                ( Hs.coerce @(Hs.Vector Monocle.Search.Field)
                    @(HsProtobuf.NestedVec Monocle.Search.Field)
                    fieldsResponseFields
                )
            )
          ]
      )
  decodeMessage _ =
    (Hs.pure FieldsResponse)
      <*> ( Hs.coerce @(_ (HsProtobuf.NestedVec Monocle.Search.Field))
              @(_ (Hs.Vector Monocle.Search.Field))
              ( HsProtobuf.at
                  HsProtobuf.decodeMessageField
                  (HsProtobuf.FieldNumber 1)
              )
          )
  dotProto _ =
    [ ( HsProtobuf.DotProtoField
          (HsProtobuf.FieldNumber 1)
          ( HsProtobuf.Repeated
              (HsProtobuf.Named (HsProtobuf.Single "Field"))
          )
          (HsProtobuf.Single "fields")
          []
          ""
      )
    ]

instance HsJSONPB.ToJSONPB FieldsResponse where
  toJSONPB (FieldsResponse f1) = (HsJSONPB.object ["fields" .= f1])
  toEncodingPB (FieldsResponse f1) =
    (HsJSONPB.pairs ["fields" .= f1])

instance HsJSONPB.FromJSONPB FieldsResponse where
  parseJSONPB =
    ( HsJSONPB.withObject
        "FieldsResponse"
        (\obj -> (Hs.pure FieldsResponse) <*> obj .: "fields")
    )

instance HsJSONPB.ToJSON FieldsResponse where
  toJSON = HsJSONPB.toAesonValue
  toEncoding = HsJSONPB.toAesonEncoding

instance HsJSONPB.FromJSON FieldsResponse where
  parseJSON = HsJSONPB.parseJSONPB

instance HsJSONPB.ToSchema FieldsResponse where
  declareNamedSchema _ =
    do
      let declare_fields = HsJSONPB.declareSchemaRef
      fieldsResponseFields <- declare_fields Proxy.Proxy
      let _ = Hs.pure FieldsResponse <*> HsJSONPB.asProxy declare_fields
      Hs.return
        ( HsJSONPB.NamedSchema
            { HsJSONPB._namedSchemaName =
                Hs.Just "FieldsResponse",
              HsJSONPB._namedSchemaSchema =
                Hs.mempty
                  { HsJSONPB._schemaParamSchema =
                      Hs.mempty
                        { HsJSONPB._paramSchemaType =
                            Hs.Just HsJSONPB.SwaggerObject
                        },
                    HsJSONPB._schemaProperties =
                      HsJSONPB.insOrdFromList
                        [("fields", fieldsResponseFields)]
                  }
            }
        )

data QueryError = QueryError
  { queryErrorMessage :: Hs.Text,
    queryErrorPosition :: Hs.Word32
  }
  deriving (Hs.Show, Hs.Eq, Hs.Ord, Hs.Generic, Hs.NFData)

instance HsProtobuf.Named QueryError where
  nameOf _ = (Hs.fromString "QueryError")

instance HsProtobuf.HasDefault QueryError

instance HsProtobuf.Message QueryError where
  encodeMessage
    _
    QueryError
      { queryErrorMessage = queryErrorMessage,
        queryErrorPosition = queryErrorPosition
      } =
      ( Hs.mconcat
          [ ( HsProtobuf.encodeMessageField
                (HsProtobuf.FieldNumber 1)
                queryErrorMessage
            ),
            ( HsProtobuf.encodeMessageField
                (HsProtobuf.FieldNumber 2)
                queryErrorPosition
            )
          ]
      )
  decodeMessage _ =
    (Hs.pure QueryError)
      <*> ( HsProtobuf.at
              HsProtobuf.decodeMessageField
              (HsProtobuf.FieldNumber 1)
          )
      <*> ( HsProtobuf.at
              HsProtobuf.decodeMessageField
              (HsProtobuf.FieldNumber 2)
          )
  dotProto _ =
    [ ( HsProtobuf.DotProtoField
          (HsProtobuf.FieldNumber 1)
          (HsProtobuf.Prim HsProtobuf.String)
          (HsProtobuf.Single "message")
          []
          ""
      ),
      ( HsProtobuf.DotProtoField
          (HsProtobuf.FieldNumber 2)
          (HsProtobuf.Prim HsProtobuf.UInt32)
          (HsProtobuf.Single "position")
          []
          ""
      )
    ]

instance HsJSONPB.ToJSONPB QueryError where
  toJSONPB (QueryError f1 f2) =
    (HsJSONPB.object ["message" .= f1, "position" .= f2])
  toEncodingPB (QueryError f1 f2) =
    (HsJSONPB.pairs ["message" .= f1, "position" .= f2])

instance HsJSONPB.FromJSONPB QueryError where
  parseJSONPB =
    ( HsJSONPB.withObject
        "QueryError"
        ( \obj ->
            (Hs.pure QueryError) <*> obj .: "message" <*> obj .: "position"
        )
    )

instance HsJSONPB.ToJSON QueryError where
  toJSON = HsJSONPB.toAesonValue
  toEncoding = HsJSONPB.toAesonEncoding

instance HsJSONPB.FromJSON QueryError where
  parseJSON = HsJSONPB.parseJSONPB

instance HsJSONPB.ToSchema QueryError where
  declareNamedSchema _ =
    do
      let declare_message = HsJSONPB.declareSchemaRef
      queryErrorMessage <- declare_message Proxy.Proxy
      let declare_position = HsJSONPB.declareSchemaRef
      queryErrorPosition <- declare_position Proxy.Proxy
      let _ =
            Hs.pure QueryError <*> HsJSONPB.asProxy declare_message
              <*> HsJSONPB.asProxy declare_position
      Hs.return
        ( HsJSONPB.NamedSchema
            { HsJSONPB._namedSchemaName =
                Hs.Just "QueryError",
              HsJSONPB._namedSchemaSchema =
                Hs.mempty
                  { HsJSONPB._schemaParamSchema =
                      Hs.mempty
                        { HsJSONPB._paramSchemaType =
                            Hs.Just HsJSONPB.SwaggerObject
                        },
                    HsJSONPB._schemaProperties =
                      HsJSONPB.insOrdFromList
                        [ ("message", queryErrorMessage),
                          ("position", queryErrorPosition)
                        ]
                  }
            }
        )

data ChangesQueryRequest = ChangesQueryRequest
  { changesQueryRequestIndex ::
      Hs.Text,
    changesQueryRequestQuery :: Hs.Text
  }
  deriving (Hs.Show, Hs.Eq, Hs.Ord, Hs.Generic, Hs.NFData)

instance HsProtobuf.Named ChangesQueryRequest where
  nameOf _ = (Hs.fromString "ChangesQueryRequest")

instance HsProtobuf.HasDefault ChangesQueryRequest

instance HsProtobuf.Message ChangesQueryRequest where
  encodeMessage
    _
    ChangesQueryRequest
      { changesQueryRequestIndex =
          changesQueryRequestIndex,
        changesQueryRequestQuery = changesQueryRequestQuery
      } =
      ( Hs.mconcat
          [ ( HsProtobuf.encodeMessageField
                (HsProtobuf.FieldNumber 1)
                changesQueryRequestIndex
            ),
            ( HsProtobuf.encodeMessageField
                (HsProtobuf.FieldNumber 2)
                changesQueryRequestQuery
            )
          ]
      )
  decodeMessage _ =
    (Hs.pure ChangesQueryRequest)
      <*> ( HsProtobuf.at
              HsProtobuf.decodeMessageField
              (HsProtobuf.FieldNumber 1)
          )
      <*> ( HsProtobuf.at
              HsProtobuf.decodeMessageField
              (HsProtobuf.FieldNumber 2)
          )
  dotProto _ =
    [ ( HsProtobuf.DotProtoField
          (HsProtobuf.FieldNumber 1)
          (HsProtobuf.Prim HsProtobuf.String)
          (HsProtobuf.Single "index")
          []
          ""
      ),
      ( HsProtobuf.DotProtoField
          (HsProtobuf.FieldNumber 2)
          (HsProtobuf.Prim HsProtobuf.String)
          (HsProtobuf.Single "query")
          []
          ""
      )
    ]

instance HsJSONPB.ToJSONPB ChangesQueryRequest where
  toJSONPB (ChangesQueryRequest f1 f2) =
    (HsJSONPB.object ["index" .= f1, "query" .= f2])
  toEncodingPB (ChangesQueryRequest f1 f2) =
    (HsJSONPB.pairs ["index" .= f1, "query" .= f2])

instance HsJSONPB.FromJSONPB ChangesQueryRequest where
  parseJSONPB =
    ( HsJSONPB.withObject
        "ChangesQueryRequest"
        ( \obj ->
            (Hs.pure ChangesQueryRequest) <*> obj .: "index"
              <*> obj .: "query"
        )
    )

instance HsJSONPB.ToJSON ChangesQueryRequest where
  toJSON = HsJSONPB.toAesonValue
  toEncoding = HsJSONPB.toAesonEncoding

instance HsJSONPB.FromJSON ChangesQueryRequest where
  parseJSON = HsJSONPB.parseJSONPB

instance HsJSONPB.ToSchema ChangesQueryRequest where
  declareNamedSchema _ =
    do
      let declare_index = HsJSONPB.declareSchemaRef
      changesQueryRequestIndex <- declare_index Proxy.Proxy
      let declare_query = HsJSONPB.declareSchemaRef
      changesQueryRequestQuery <- declare_query Proxy.Proxy
      let _ =
            Hs.pure ChangesQueryRequest
              <*> HsJSONPB.asProxy declare_index
              <*> HsJSONPB.asProxy declare_query
      Hs.return
        ( HsJSONPB.NamedSchema
            { HsJSONPB._namedSchemaName =
                Hs.Just "ChangesQueryRequest",
              HsJSONPB._namedSchemaSchema =
                Hs.mempty
                  { HsJSONPB._schemaParamSchema =
                      Hs.mempty
                        { HsJSONPB._paramSchemaType =
                            Hs.Just HsJSONPB.SwaggerObject
                        },
                    HsJSONPB._schemaProperties =
                      HsJSONPB.insOrdFromList
                        [ ("index", changesQueryRequestIndex),
                          ("query", changesQueryRequestQuery)
                        ]
                  }
            }
        )

data Change = Change
  { changeTitle :: Hs.Text,
    changeUrl :: Hs.Text,
    changeCreatedAt :: Hs.Maybe Google.Protobuf.Timestamp.Timestamp
  }
  deriving (Hs.Show, Hs.Eq, Hs.Ord, Hs.Generic, Hs.NFData)

instance HsProtobuf.Named Change where
  nameOf _ = (Hs.fromString "Change")

instance HsProtobuf.HasDefault Change

instance HsProtobuf.Message Change where
  encodeMessage
    _
    Change
      { changeTitle = changeTitle,
        changeUrl = changeUrl,
        changeCreatedAt = changeCreatedAt
      } =
      ( Hs.mconcat
          [ ( HsProtobuf.encodeMessageField
                (HsProtobuf.FieldNumber 1)
                changeTitle
            ),
            ( HsProtobuf.encodeMessageField
                (HsProtobuf.FieldNumber 2)
                changeUrl
            ),
            ( HsProtobuf.encodeMessageField
                (HsProtobuf.FieldNumber 3)
                ( Hs.coerce @(Hs.Maybe Google.Protobuf.Timestamp.Timestamp)
                    @(HsProtobuf.Nested Google.Protobuf.Timestamp.Timestamp)
                    changeCreatedAt
                )
            )
          ]
      )
  decodeMessage _ =
    (Hs.pure Change)
      <*> ( HsProtobuf.at
              HsProtobuf.decodeMessageField
              (HsProtobuf.FieldNumber 1)
          )
      <*> ( HsProtobuf.at
              HsProtobuf.decodeMessageField
              (HsProtobuf.FieldNumber 2)
          )
      <*> ( Hs.coerce
              @(_ (HsProtobuf.Nested Google.Protobuf.Timestamp.Timestamp))
              @(_ (Hs.Maybe Google.Protobuf.Timestamp.Timestamp))
              ( HsProtobuf.at
                  HsProtobuf.decodeMessageField
                  (HsProtobuf.FieldNumber 3)
              )
          )
  dotProto _ =
    [ ( HsProtobuf.DotProtoField
          (HsProtobuf.FieldNumber 1)
          (HsProtobuf.Prim HsProtobuf.String)
          (HsProtobuf.Single "title")
          []
          ""
      ),
      ( HsProtobuf.DotProtoField
          (HsProtobuf.FieldNumber 2)
          (HsProtobuf.Prim HsProtobuf.String)
          (HsProtobuf.Single "url")
          []
          ""
      ),
      ( HsProtobuf.DotProtoField
          (HsProtobuf.FieldNumber 3)
          ( HsProtobuf.Prim
              ( HsProtobuf.Named
                  ( HsProtobuf.Dots
                      (HsProtobuf.Path ("google" Hs.:| ["protobuf", "Timestamp"]))
                  )
              )
          )
          (HsProtobuf.Single "created_at")
          []
          ""
      )
    ]

instance HsJSONPB.ToJSONPB Change where
  toJSONPB (Change f1 f2 f3) =
    ( HsJSONPB.object
        ["title" .= f1, "url" .= f2, "created_at" .= f3]
    )
  toEncodingPB (Change f1 f2 f3) =
    (HsJSONPB.pairs ["title" .= f1, "url" .= f2, "created_at" .= f3])

instance HsJSONPB.FromJSONPB Change where
  parseJSONPB =
    ( HsJSONPB.withObject
        "Change"
        ( \obj ->
            (Hs.pure Change) <*> obj .: "title" <*> obj .: "url"
              <*> obj .: "created_at"
        )
    )

instance HsJSONPB.ToJSON Change where
  toJSON = HsJSONPB.toAesonValue
  toEncoding = HsJSONPB.toAesonEncoding

instance HsJSONPB.FromJSON Change where
  parseJSON = HsJSONPB.parseJSONPB

instance HsJSONPB.ToSchema Change where
  declareNamedSchema _ =
    do
      let declare_title = HsJSONPB.declareSchemaRef
      changeTitle <- declare_title Proxy.Proxy
      let declare_url = HsJSONPB.declareSchemaRef
      changeUrl <- declare_url Proxy.Proxy
      let declare_created_at = HsJSONPB.declareSchemaRef
      changeCreatedAt <- declare_created_at Proxy.Proxy
      let _ =
            Hs.pure Change <*> HsJSONPB.asProxy declare_title
              <*> HsJSONPB.asProxy declare_url
              <*> HsJSONPB.asProxy declare_created_at
      Hs.return
        ( HsJSONPB.NamedSchema
            { HsJSONPB._namedSchemaName = Hs.Just "Change",
              HsJSONPB._namedSchemaSchema =
                Hs.mempty
                  { HsJSONPB._schemaParamSchema =
                      Hs.mempty
                        { HsJSONPB._paramSchemaType =
                            Hs.Just HsJSONPB.SwaggerObject
                        },
                    HsJSONPB._schemaProperties =
                      HsJSONPB.insOrdFromList
                        [ ("title", changeTitle),
                          ("url", changeUrl),
                          ("created_at", changeCreatedAt)
                        ]
                  }
            }
        )

newtype Changes = Changes
  { changesChanges ::
      Hs.Vector Monocle.Search.Change
  }
  deriving (Hs.Show, Hs.Eq, Hs.Ord, Hs.Generic, Hs.NFData)

instance HsProtobuf.Named Changes where
  nameOf _ = (Hs.fromString "Changes")

instance HsProtobuf.HasDefault Changes

instance HsProtobuf.Message Changes where
  encodeMessage _ Changes {changesChanges = changesChanges} =
    ( Hs.mconcat
        [ ( HsProtobuf.encodeMessageField
              (HsProtobuf.FieldNumber 1)
              ( Hs.coerce @(Hs.Vector Monocle.Search.Change)
                  @(HsProtobuf.NestedVec Monocle.Search.Change)
                  changesChanges
              )
          )
        ]
    )
  decodeMessage _ =
    (Hs.pure Changes)
      <*> ( Hs.coerce @(_ (HsProtobuf.NestedVec Monocle.Search.Change))
              @(_ (Hs.Vector Monocle.Search.Change))
              ( HsProtobuf.at
                  HsProtobuf.decodeMessageField
                  (HsProtobuf.FieldNumber 1)
              )
          )
  dotProto _ =
    [ ( HsProtobuf.DotProtoField
          (HsProtobuf.FieldNumber 1)
          ( HsProtobuf.Repeated
              (HsProtobuf.Named (HsProtobuf.Single "Change"))
          )
          (HsProtobuf.Single "changes")
          []
          ""
      )
    ]

instance HsJSONPB.ToJSONPB Changes where
  toJSONPB (Changes f1) = (HsJSONPB.object ["changes" .= f1])
  toEncodingPB (Changes f1) = (HsJSONPB.pairs ["changes" .= f1])

instance HsJSONPB.FromJSONPB Changes where
  parseJSONPB =
    ( HsJSONPB.withObject
        "Changes"
        (\obj -> (Hs.pure Changes) <*> obj .: "changes")
    )

instance HsJSONPB.ToJSON Changes where
  toJSON = HsJSONPB.toAesonValue
  toEncoding = HsJSONPB.toAesonEncoding

instance HsJSONPB.FromJSON Changes where
  parseJSON = HsJSONPB.parseJSONPB

instance HsJSONPB.ToSchema Changes where
  declareNamedSchema _ =
    do
      let declare_changes = HsJSONPB.declareSchemaRef
      changesChanges <- declare_changes Proxy.Proxy
      let _ = Hs.pure Changes <*> HsJSONPB.asProxy declare_changes
      Hs.return
        ( HsJSONPB.NamedSchema
            { HsJSONPB._namedSchemaName =
                Hs.Just "Changes",
              HsJSONPB._namedSchemaSchema =
                Hs.mempty
                  { HsJSONPB._schemaParamSchema =
                      Hs.mempty
                        { HsJSONPB._paramSchemaType =
                            Hs.Just HsJSONPB.SwaggerObject
                        },
                    HsJSONPB._schemaProperties =
                      HsJSONPB.insOrdFromList
                        [("changes", changesChanges)]
                  }
            }
        )

newtype ChangesQueryResponse = ChangesQueryResponse
  { changesQueryResponseResult ::
      Hs.Maybe ChangesQueryResponseResult
  }
  deriving (Hs.Show, Hs.Eq, Hs.Ord, Hs.Generic, Hs.NFData)

instance HsProtobuf.Named ChangesQueryResponse where
  nameOf _ = (Hs.fromString "ChangesQueryResponse")

instance HsProtobuf.HasDefault ChangesQueryResponse

instance HsProtobuf.Message ChangesQueryResponse where
  encodeMessage
    _
    ChangesQueryResponse
      { changesQueryResponseResult =
          changesQueryResponseResult
      } =
      ( Hs.mconcat
          [ case changesQueryResponseResult of
              Hs.Nothing -> Hs.mempty
              Hs.Just x ->
                case x of
                  ChangesQueryResponseResultError y ->
                    ( HsProtobuf.encodeMessageField
                        (HsProtobuf.FieldNumber 1)
                        ( Hs.coerce @(Hs.Maybe Monocle.Search.QueryError)
                            @(HsProtobuf.Nested Monocle.Search.QueryError)
                            (Hs.Just y)
                        )
                    )
                  ChangesQueryResponseResultItems y ->
                    ( HsProtobuf.encodeMessageField
                        (HsProtobuf.FieldNumber 2)
                        ( Hs.coerce @(Hs.Maybe Monocle.Search.Changes)
                            @(HsProtobuf.Nested Monocle.Search.Changes)
                            (Hs.Just y)
                        )
                    )
          ]
      )
  decodeMessage _ =
    (Hs.pure ChangesQueryResponse)
      <*> ( HsProtobuf.oneof
              Hs.Nothing
              [ ( (HsProtobuf.FieldNumber 1),
                  (Hs.pure (Hs.fmap ChangesQueryResponseResultError))
                    <*> ( Hs.coerce @(_ (HsProtobuf.Nested Monocle.Search.QueryError))
                            @(_ (Hs.Maybe Monocle.Search.QueryError))
                            HsProtobuf.decodeMessageField
                        )
                ),
                ( (HsProtobuf.FieldNumber 2),
                  (Hs.pure (Hs.fmap ChangesQueryResponseResultItems))
                    <*> ( Hs.coerce @(_ (HsProtobuf.Nested Monocle.Search.Changes))
                            @(_ (Hs.Maybe Monocle.Search.Changes))
                            HsProtobuf.decodeMessageField
                        )
                )
              ]
          )
  dotProto _ = []

instance HsJSONPB.ToJSONPB ChangesQueryResponse where
  toJSONPB (ChangesQueryResponse f1_or_f2) =
    ( HsJSONPB.object
        [ ( let encodeResult =
                  ( case f1_or_f2 of
                      Hs.Just (ChangesQueryResponseResultError f1) ->
                        (HsJSONPB.pair "error" f1)
                      Hs.Just (ChangesQueryResponseResultItems f2) ->
                        (HsJSONPB.pair "items" f2)
                      Hs.Nothing -> Hs.mempty
                  )
             in \options ->
                  if HsJSONPB.optEmitNamedOneof options
                    then
                      ("result" .= (HsJSONPB.objectOrNull [encodeResult] options))
                        options
                    else encodeResult options
          )
        ]
    )
  toEncodingPB (ChangesQueryResponse f1_or_f2) =
    ( HsJSONPB.pairs
        [ ( let encodeResult =
                  ( case f1_or_f2 of
                      Hs.Just (ChangesQueryResponseResultError f1) ->
                        (HsJSONPB.pair "error" f1)
                      Hs.Just (ChangesQueryResponseResultItems f2) ->
                        (HsJSONPB.pair "items" f2)
                      Hs.Nothing -> Hs.mempty
                  )
             in \options ->
                  if HsJSONPB.optEmitNamedOneof options
                    then ("result" .= (HsJSONPB.pairsOrNull [encodeResult] options)) options
                    else encodeResult options
          )
        ]
    )

instance HsJSONPB.FromJSONPB ChangesQueryResponse where
  parseJSONPB =
    ( HsJSONPB.withObject
        "ChangesQueryResponse"
        ( \obj ->
            (Hs.pure ChangesQueryResponse)
              <*> ( let parseResult parseObj =
                          Hs.msum
                            [ Hs.Just Hs.. ChangesQueryResponseResultError
                                <$> (HsJSONPB.parseField parseObj "error"),
                              Hs.Just Hs.. ChangesQueryResponseResultItems
                                <$> (HsJSONPB.parseField parseObj "items"),
                              Hs.pure Hs.Nothing
                            ]
                     in ( (obj .: "result")
                            Hs.>>= (HsJSONPB.withObject "result" parseResult)
                        )
                          <|> (parseResult obj)
                  )
        )
    )

instance HsJSONPB.ToJSON ChangesQueryResponse where
  toJSON = HsJSONPB.toAesonValue
  toEncoding = HsJSONPB.toAesonEncoding

instance HsJSONPB.FromJSON ChangesQueryResponse where
  parseJSON = HsJSONPB.parseJSONPB

instance HsJSONPB.ToSchema ChangesQueryResponse where
  declareNamedSchema _ =
    do
      let declare_result = HsJSONPB.declareSchemaRef
      changesQueryResponseResult <- declare_result Proxy.Proxy
      let _ =
            Hs.pure ChangesQueryResponse
              <*> HsJSONPB.asProxy declare_result
      Hs.return
        ( HsJSONPB.NamedSchema
            { HsJSONPB._namedSchemaName =
                Hs.Just "ChangesQueryResponse",
              HsJSONPB._namedSchemaSchema =
                Hs.mempty
                  { HsJSONPB._schemaParamSchema =
                      Hs.mempty
                        { HsJSONPB._paramSchemaType =
                            Hs.Just HsJSONPB.SwaggerObject
                        },
                    HsJSONPB._schemaProperties =
                      HsJSONPB.insOrdFromList
                        [("result", changesQueryResponseResult)]
                  }
            }
        )

data ChangesQueryResponseResult
  = ChangesQueryResponseResultError Monocle.Search.QueryError
  | ChangesQueryResponseResultItems Monocle.Search.Changes
  deriving (Hs.Show, Hs.Eq, Hs.Ord, Hs.Generic, Hs.NFData)

instance HsProtobuf.Named ChangesQueryResponseResult where
  nameOf _ = (Hs.fromString "ChangesQueryResponseResult")

instance HsJSONPB.ToSchema ChangesQueryResponseResult where
  declareNamedSchema _ =
    do
      let declare_error = HsJSONPB.declareSchemaRef
      changesQueryResponseResultError <- declare_error Proxy.Proxy
      let _ =
            Hs.pure ChangesQueryResponseResultError
              <*> HsJSONPB.asProxy declare_error
      let declare_items = HsJSONPB.declareSchemaRef
      changesQueryResponseResultItems <- declare_items Proxy.Proxy
      let _ =
            Hs.pure ChangesQueryResponseResultItems
              <*> HsJSONPB.asProxy declare_items
      Hs.return
        ( HsJSONPB.NamedSchema
            { HsJSONPB._namedSchemaName =
                Hs.Just "ChangesQueryResponseResult",
              HsJSONPB._namedSchemaSchema =
                Hs.mempty
                  { HsJSONPB._schemaParamSchema =
                      Hs.mempty
                        { HsJSONPB._paramSchemaType =
                            Hs.Just HsJSONPB.SwaggerObject
                        },
                    HsJSONPB._schemaProperties =
                      HsJSONPB.insOrdFromList
                        [ ("error", changesQueryResponseResultError),
                          ("items", changesQueryResponseResultItems)
                        ],
                    HsJSONPB._schemaMinProperties = Hs.Just 1,
                    HsJSONPB._schemaMaxProperties = Hs.Just 1
                  }
            }
        )
