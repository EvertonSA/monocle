{-# LANGUAGE DataKinds #-}
{-# LANGUAGE DeriveAnyClass #-}
{-# LANGUAGE DeriveGeneric #-}
{-# LANGUAGE GADTs #-}
{-# LANGUAGE OverloadedStrings #-}
{-# LANGUAGE TypeApplications #-}
{-# OPTIONS_GHC -fno-warn-name-shadowing #-}
{-# OPTIONS_GHC -fno-warn-unused-imports #-}
{-# OPTIONS_GHC -fno-warn-unused-matches #-}

-- | Generated by Haskell protocol buffer compiler. DO NOT EDIT!
module Monocle.TaskData where

import Control.Applicative ((<$>), (<*>), (<|>))
import qualified Control.Applicative as Hs
import qualified Control.DeepSeq as Hs
import qualified Control.Monad as Hs
import qualified Data.ByteString as Hs
import qualified Data.Coerce as Hs
import qualified Data.Int as Hs (Int16, Int32, Int64)
import qualified Data.List.NonEmpty as Hs (NonEmpty (..))
import qualified Data.Map as Hs (Map, mapKeysMonotonic)
import qualified Data.Proxy as Proxy
import qualified Data.String as Hs (fromString)
import qualified Data.Text.Lazy as Hs (Text)
import qualified Data.Vector as Hs (Vector)
import qualified Data.Word as Hs (Word16, Word32, Word64)
import qualified GHC.Enum as Hs
import qualified GHC.Generics as Hs
import qualified Google.Protobuf.Timestamp
import qualified Proto3.Suite.Class as HsProtobuf
import qualified Proto3.Suite.DotProto as HsProtobuf
import Proto3.Suite.JSONPB ((.:), (.=))
import qualified Proto3.Suite.JSONPB as HsJSONPB
import qualified Proto3.Suite.Types as HsProtobuf
import qualified Proto3.Wire as HsProtobuf
import qualified Unsafe.Coerce as Hs
import qualified Prelude as Hs

data TaskDataCommitRequest = TaskDataCommitRequest
  { taskDataCommitRequestIndex ::
      Hs.Text,
    taskDataCommitRequestCrawler :: Hs.Text,
    taskDataCommitRequestApikey :: Hs.Text,
    taskDataCommitRequestTimestamp ::
      Hs.Maybe Google.Protobuf.Timestamp.Timestamp
  }
  deriving (Hs.Show, Hs.Eq, Hs.Ord, Hs.Generic, Hs.NFData)

instance HsProtobuf.Named TaskDataCommitRequest where
  nameOf _ = (Hs.fromString "TaskDataCommitRequest")

instance HsProtobuf.HasDefault TaskDataCommitRequest

instance HsProtobuf.Message TaskDataCommitRequest where
  encodeMessage
    _
    TaskDataCommitRequest
      { taskDataCommitRequestIndex =
          taskDataCommitRequestIndex,
        taskDataCommitRequestCrawler = taskDataCommitRequestCrawler,
        taskDataCommitRequestApikey = taskDataCommitRequestApikey,
        taskDataCommitRequestTimestamp = taskDataCommitRequestTimestamp
      } =
      ( Hs.mconcat
          [ ( HsProtobuf.encodeMessageField
                (HsProtobuf.FieldNumber 1)
                taskDataCommitRequestIndex
            ),
            ( HsProtobuf.encodeMessageField
                (HsProtobuf.FieldNumber 2)
                taskDataCommitRequestCrawler
            ),
            ( HsProtobuf.encodeMessageField
                (HsProtobuf.FieldNumber 3)
                taskDataCommitRequestApikey
            ),
            ( HsProtobuf.encodeMessageField
                (HsProtobuf.FieldNumber 4)
                ( Hs.coerce @(Hs.Maybe Google.Protobuf.Timestamp.Timestamp)
                    @(HsProtobuf.Nested Google.Protobuf.Timestamp.Timestamp)
                    taskDataCommitRequestTimestamp
                )
            )
          ]
      )
  decodeMessage _ =
    (Hs.pure TaskDataCommitRequest)
      <*> ( HsProtobuf.at
              HsProtobuf.decodeMessageField
              (HsProtobuf.FieldNumber 1)
          )
      <*> ( HsProtobuf.at
              HsProtobuf.decodeMessageField
              (HsProtobuf.FieldNumber 2)
          )
      <*> ( HsProtobuf.at
              HsProtobuf.decodeMessageField
              (HsProtobuf.FieldNumber 3)
          )
      <*> ( Hs.coerce
              @(_ (HsProtobuf.Nested Google.Protobuf.Timestamp.Timestamp))
              @(_ (Hs.Maybe Google.Protobuf.Timestamp.Timestamp))
              ( HsProtobuf.at
                  HsProtobuf.decodeMessageField
                  (HsProtobuf.FieldNumber 4)
              )
          )
  dotProto _ =
    [ ( HsProtobuf.DotProtoField
          (HsProtobuf.FieldNumber 1)
          (HsProtobuf.Prim HsProtobuf.String)
          (HsProtobuf.Single "index")
          []
          ""
      ),
      ( HsProtobuf.DotProtoField
          (HsProtobuf.FieldNumber 2)
          (HsProtobuf.Prim HsProtobuf.String)
          (HsProtobuf.Single "crawler")
          []
          ""
      ),
      ( HsProtobuf.DotProtoField
          (HsProtobuf.FieldNumber 3)
          (HsProtobuf.Prim HsProtobuf.String)
          (HsProtobuf.Single "apikey")
          []
          ""
      ),
      ( HsProtobuf.DotProtoField
          (HsProtobuf.FieldNumber 4)
          ( HsProtobuf.Prim
              ( HsProtobuf.Named
                  ( HsProtobuf.Dots
                      (HsProtobuf.Path ("google" Hs.:| ["protobuf", "Timestamp"]))
                  )
              )
          )
          (HsProtobuf.Single "timestamp")
          []
          ""
      )
    ]

instance HsJSONPB.ToJSONPB TaskDataCommitRequest where
  toJSONPB (TaskDataCommitRequest f1 f2 f3 f4) =
    ( HsJSONPB.object
        [ "index" .= f1,
          "crawler" .= f2,
          "apikey" .= f3,
          "timestamp" .= f4
        ]
    )
  toEncodingPB (TaskDataCommitRequest f1 f2 f3 f4) =
    ( HsJSONPB.pairs
        [ "index" .= f1,
          "crawler" .= f2,
          "apikey" .= f3,
          "timestamp" .= f4
        ]
    )

instance HsJSONPB.FromJSONPB TaskDataCommitRequest where
  parseJSONPB =
    ( HsJSONPB.withObject
        "TaskDataCommitRequest"
        ( \obj ->
            (Hs.pure TaskDataCommitRequest) <*> obj .: "index"
              <*> obj .: "crawler"
              <*> obj .: "apikey"
              <*> obj .: "timestamp"
        )
    )

instance HsJSONPB.ToJSON TaskDataCommitRequest where
  toJSON = HsJSONPB.toAesonValue
  toEncoding = HsJSONPB.toAesonEncoding

instance HsJSONPB.FromJSON TaskDataCommitRequest where
  parseJSON = HsJSONPB.parseJSONPB

instance HsJSONPB.ToSchema TaskDataCommitRequest where
  declareNamedSchema _ =
    do
      let declare_index = HsJSONPB.declareSchemaRef
      taskDataCommitRequestIndex <- declare_index Proxy.Proxy
      let declare_crawler = HsJSONPB.declareSchemaRef
      taskDataCommitRequestCrawler <- declare_crawler Proxy.Proxy
      let declare_apikey = HsJSONPB.declareSchemaRef
      taskDataCommitRequestApikey <- declare_apikey Proxy.Proxy
      let declare_timestamp = HsJSONPB.declareSchemaRef
      taskDataCommitRequestTimestamp <- declare_timestamp Proxy.Proxy
      let _ =
            Hs.pure TaskDataCommitRequest
              <*> HsJSONPB.asProxy declare_index
              <*> HsJSONPB.asProxy declare_crawler
              <*> HsJSONPB.asProxy declare_apikey
              <*> HsJSONPB.asProxy declare_timestamp
      Hs.return
        ( HsJSONPB.NamedSchema
            { HsJSONPB._namedSchemaName =
                Hs.Just "TaskDataCommitRequest",
              HsJSONPB._namedSchemaSchema =
                Hs.mempty
                  { HsJSONPB._schemaParamSchema =
                      Hs.mempty
                        { HsJSONPB._paramSchemaType =
                            Hs.Just HsJSONPB.SwaggerObject
                        },
                    HsJSONPB._schemaProperties =
                      HsJSONPB.insOrdFromList
                        [ ("index", taskDataCommitRequestIndex),
                          ("crawler", taskDataCommitRequestCrawler),
                          ("apikey", taskDataCommitRequestApikey),
                          ( "timestamp",
                            taskDataCommitRequestTimestamp
                          )
                        ]
                  }
            }
        )

data TaskDataCommitError
  = TaskDataCommitErrorUnknownIndex
  | TaskDataCommitErrorUnknownCrawler
  | TaskDataCommitErrorUnknownApiKey
  | TaskDataCommitErrorCommitDateInferiorThanPrevious
  deriving (Hs.Show, Hs.Eq, Hs.Generic, Hs.NFData)

instance HsProtobuf.Named TaskDataCommitError where
  nameOf _ = (Hs.fromString "TaskDataCommitError")

instance HsProtobuf.HasDefault TaskDataCommitError

instance Hs.Bounded TaskDataCommitError where
  minBound = TaskDataCommitErrorUnknownIndex
  maxBound = TaskDataCommitErrorCommitDateInferiorThanPrevious

instance Hs.Ord TaskDataCommitError where
  compare x y =
    Hs.compare
      (HsProtobuf.fromProtoEnum x)
      (HsProtobuf.fromProtoEnum y)

instance HsProtobuf.ProtoEnum TaskDataCommitError where
  toProtoEnumMay 0 = Hs.Just TaskDataCommitErrorUnknownIndex
  toProtoEnumMay 1 = Hs.Just TaskDataCommitErrorUnknownCrawler
  toProtoEnumMay 2 = Hs.Just TaskDataCommitErrorUnknownApiKey
  toProtoEnumMay 3 =
    Hs.Just TaskDataCommitErrorCommitDateInferiorThanPrevious
  toProtoEnumMay _ = Hs.Nothing
  fromProtoEnum (TaskDataCommitErrorUnknownIndex) = 0
  fromProtoEnum (TaskDataCommitErrorUnknownCrawler) = 1
  fromProtoEnum (TaskDataCommitErrorUnknownApiKey) = 2
  fromProtoEnum (TaskDataCommitErrorCommitDateInferiorThanPrevious) =
    3

instance HsJSONPB.ToJSONPB TaskDataCommitError where
  toJSONPB x _ = HsJSONPB.enumFieldString x
  toEncodingPB x _ = HsJSONPB.enumFieldEncoding x

instance HsJSONPB.FromJSONPB TaskDataCommitError where
  parseJSONPB (HsJSONPB.String "UnknownIndex") =
    Hs.pure TaskDataCommitErrorUnknownIndex
  parseJSONPB (HsJSONPB.String "UnknownCrawler") =
    Hs.pure TaskDataCommitErrorUnknownCrawler
  parseJSONPB (HsJSONPB.String "UnknownApiKey") =
    Hs.pure TaskDataCommitErrorUnknownApiKey
  parseJSONPB (HsJSONPB.String "CommitDateInferiorThanPrevious") =
    Hs.pure TaskDataCommitErrorCommitDateInferiorThanPrevious
  parseJSONPB v = (HsJSONPB.typeMismatch "TaskDataCommitError" v)

instance HsJSONPB.ToJSON TaskDataCommitError where
  toJSON = HsJSONPB.toAesonValue
  toEncoding = HsJSONPB.toAesonEncoding

instance HsJSONPB.FromJSON TaskDataCommitError where
  parseJSON = HsJSONPB.parseJSONPB

instance HsProtobuf.Finite TaskDataCommitError

newtype TaskDataCommitResponse = TaskDataCommitResponse
  { taskDataCommitResponseResult ::
      Hs.Maybe TaskDataCommitResponseResult
  }
  deriving (Hs.Show, Hs.Eq, Hs.Ord, Hs.Generic, Hs.NFData)

instance HsProtobuf.Named TaskDataCommitResponse where
  nameOf _ = (Hs.fromString "TaskDataCommitResponse")

instance HsProtobuf.HasDefault TaskDataCommitResponse

instance HsProtobuf.Message TaskDataCommitResponse where
  encodeMessage
    _
    TaskDataCommitResponse
      { taskDataCommitResponseResult =
          taskDataCommitResponseResult
      } =
      ( Hs.mconcat
          [ case taskDataCommitResponseResult of
              Hs.Nothing -> Hs.mempty
              Hs.Just x ->
                case x of
                  TaskDataCommitResponseResultError y ->
                    ( HsProtobuf.encodeMessageField
                        (HsProtobuf.FieldNumber 1)
                        (HsProtobuf.ForceEmit y)
                    )
                  TaskDataCommitResponseResultTimestamp y ->
                    ( HsProtobuf.encodeMessageField
                        (HsProtobuf.FieldNumber 2)
                        ( Hs.coerce @(Hs.Maybe Google.Protobuf.Timestamp.Timestamp)
                            @(HsProtobuf.Nested Google.Protobuf.Timestamp.Timestamp)
                            (Hs.Just y)
                        )
                    )
          ]
      )
  decodeMessage _ =
    (Hs.pure TaskDataCommitResponse)
      <*> ( HsProtobuf.oneof
              Hs.Nothing
              [ ( (HsProtobuf.FieldNumber 1),
                  (Hs.pure (Hs.Just Hs.. TaskDataCommitResponseResultError))
                    <*> HsProtobuf.decodeMessageField
                ),
                ( (HsProtobuf.FieldNumber 2),
                  (Hs.pure (Hs.fmap TaskDataCommitResponseResultTimestamp))
                    <*> ( Hs.coerce
                            @(_ (HsProtobuf.Nested Google.Protobuf.Timestamp.Timestamp))
                            @(_ (Hs.Maybe Google.Protobuf.Timestamp.Timestamp))
                            HsProtobuf.decodeMessageField
                        )
                )
              ]
          )
  dotProto _ = []

instance HsJSONPB.ToJSONPB TaskDataCommitResponse where
  toJSONPB (TaskDataCommitResponse f1_or_f2) =
    ( HsJSONPB.object
        [ ( let encodeResult =
                  ( case f1_or_f2 of
                      Hs.Just (TaskDataCommitResponseResultError f1) ->
                        (HsJSONPB.pair "error" f1)
                      Hs.Just (TaskDataCommitResponseResultTimestamp f2) ->
                        (HsJSONPB.pair "timestamp" f2)
                      Hs.Nothing -> Hs.mempty
                  )
             in \options ->
                  if HsJSONPB.optEmitNamedOneof options
                    then
                      ("result" .= (HsJSONPB.objectOrNull [encodeResult] options))
                        options
                    else encodeResult options
          )
        ]
    )
  toEncodingPB (TaskDataCommitResponse f1_or_f2) =
    ( HsJSONPB.pairs
        [ ( let encodeResult =
                  ( case f1_or_f2 of
                      Hs.Just (TaskDataCommitResponseResultError f1) ->
                        (HsJSONPB.pair "error" f1)
                      Hs.Just (TaskDataCommitResponseResultTimestamp f2) ->
                        (HsJSONPB.pair "timestamp" f2)
                      Hs.Nothing -> Hs.mempty
                  )
             in \options ->
                  if HsJSONPB.optEmitNamedOneof options
                    then ("result" .= (HsJSONPB.pairsOrNull [encodeResult] options)) options
                    else encodeResult options
          )
        ]
    )

instance HsJSONPB.FromJSONPB TaskDataCommitResponse where
  parseJSONPB =
    ( HsJSONPB.withObject
        "TaskDataCommitResponse"
        ( \obj ->
            (Hs.pure TaskDataCommitResponse)
              <*> ( let parseResult parseObj =
                          Hs.msum
                            [ Hs.Just Hs.. TaskDataCommitResponseResultError
                                <$> (HsJSONPB.parseField parseObj "error"),
                              Hs.Just Hs.. TaskDataCommitResponseResultTimestamp
                                <$> (HsJSONPB.parseField parseObj "timestamp"),
                              Hs.pure Hs.Nothing
                            ]
                     in ( (obj .: "result")
                            Hs.>>= (HsJSONPB.withObject "result" parseResult)
                        )
                          <|> (parseResult obj)
                  )
        )
    )

instance HsJSONPB.ToJSON TaskDataCommitResponse where
  toJSON = HsJSONPB.toAesonValue
  toEncoding = HsJSONPB.toAesonEncoding

instance HsJSONPB.FromJSON TaskDataCommitResponse where
  parseJSON = HsJSONPB.parseJSONPB

instance HsJSONPB.ToSchema TaskDataCommitResponse where
  declareNamedSchema _ =
    do
      let declare_result = HsJSONPB.declareSchemaRef
      taskDataCommitResponseResult <- declare_result Proxy.Proxy
      let _ =
            Hs.pure TaskDataCommitResponse
              <*> HsJSONPB.asProxy declare_result
      Hs.return
        ( HsJSONPB.NamedSchema
            { HsJSONPB._namedSchemaName =
                Hs.Just "TaskDataCommitResponse",
              HsJSONPB._namedSchemaSchema =
                Hs.mempty
                  { HsJSONPB._schemaParamSchema =
                      Hs.mempty
                        { HsJSONPB._paramSchemaType =
                            Hs.Just HsJSONPB.SwaggerObject
                        },
                    HsJSONPB._schemaProperties =
                      HsJSONPB.insOrdFromList
                        [("result", taskDataCommitResponseResult)]
                  }
            }
        )

data TaskDataCommitResponseResult
  = TaskDataCommitResponseResultError
      ( HsProtobuf.Enumerated
          Monocle.TaskData.TaskDataCommitError
      )
  | TaskDataCommitResponseResultTimestamp Google.Protobuf.Timestamp.Timestamp
  deriving (Hs.Show, Hs.Eq, Hs.Ord, Hs.Generic, Hs.NFData)

instance HsProtobuf.Named TaskDataCommitResponseResult where
  nameOf _ = (Hs.fromString "TaskDataCommitResponseResult")

instance HsJSONPB.ToSchema TaskDataCommitResponseResult where
  declareNamedSchema _ =
    do
      let declare_error = HsJSONPB.declareSchemaRef
      taskDataCommitResponseResultError <- declare_error Proxy.Proxy
      let _ =
            Hs.pure TaskDataCommitResponseResultError
              <*> HsJSONPB.asProxy declare_error
      let declare_timestamp = HsJSONPB.declareSchemaRef
      taskDataCommitResponseResultTimestamp <-
        declare_timestamp
          Proxy.Proxy
      let _ =
            Hs.pure TaskDataCommitResponseResultTimestamp
              <*> HsJSONPB.asProxy declare_timestamp
      Hs.return
        ( HsJSONPB.NamedSchema
            { HsJSONPB._namedSchemaName =
                Hs.Just "TaskDataCommitResponseResult",
              HsJSONPB._namedSchemaSchema =
                Hs.mempty
                  { HsJSONPB._schemaParamSchema =
                      Hs.mempty
                        { HsJSONPB._paramSchemaType =
                            Hs.Just HsJSONPB.SwaggerObject
                        },
                    HsJSONPB._schemaProperties =
                      HsJSONPB.insOrdFromList
                        [ ( "error",
                            taskDataCommitResponseResultError
                          ),
                          ( "timestamp",
                            taskDataCommitResponseResultTimestamp
                          )
                        ],
                    HsJSONPB._schemaMinProperties = Hs.Just 1,
                    HsJSONPB._schemaMaxProperties = Hs.Just 1
                  }
            }
        )

data TaskDataGetLastUpdatedError
  = TaskDataGetLastUpdatedErrorGetUnknownIndex
  | TaskDataGetLastUpdatedErrorGetUnknownCrawler
  deriving (Hs.Show, Hs.Eq, Hs.Generic, Hs.NFData)

instance HsProtobuf.Named TaskDataGetLastUpdatedError where
  nameOf _ = (Hs.fromString "TaskDataGetLastUpdatedError")

instance HsProtobuf.HasDefault TaskDataGetLastUpdatedError

instance Hs.Bounded TaskDataGetLastUpdatedError where
  minBound = TaskDataGetLastUpdatedErrorGetUnknownIndex
  maxBound = TaskDataGetLastUpdatedErrorGetUnknownCrawler

instance Hs.Ord TaskDataGetLastUpdatedError where
  compare x y =
    Hs.compare
      (HsProtobuf.fromProtoEnum x)
      (HsProtobuf.fromProtoEnum y)

instance HsProtobuf.ProtoEnum TaskDataGetLastUpdatedError where
  toProtoEnumMay 0 =
    Hs.Just TaskDataGetLastUpdatedErrorGetUnknownIndex
  toProtoEnumMay 1 =
    Hs.Just TaskDataGetLastUpdatedErrorGetUnknownCrawler
  toProtoEnumMay _ = Hs.Nothing
  fromProtoEnum (TaskDataGetLastUpdatedErrorGetUnknownIndex) = 0
  fromProtoEnum (TaskDataGetLastUpdatedErrorGetUnknownCrawler) = 1

instance HsJSONPB.ToJSONPB TaskDataGetLastUpdatedError where
  toJSONPB x _ = HsJSONPB.enumFieldString x
  toEncodingPB x _ = HsJSONPB.enumFieldEncoding x

instance HsJSONPB.FromJSONPB TaskDataGetLastUpdatedError where
  parseJSONPB (HsJSONPB.String "GetUnknownIndex") =
    Hs.pure TaskDataGetLastUpdatedErrorGetUnknownIndex
  parseJSONPB (HsJSONPB.String "GetUnknownCrawler") =
    Hs.pure TaskDataGetLastUpdatedErrorGetUnknownCrawler
  parseJSONPB v =
    (HsJSONPB.typeMismatch "TaskDataGetLastUpdatedError" v)

instance HsJSONPB.ToJSON TaskDataGetLastUpdatedError where
  toJSON = HsJSONPB.toAesonValue
  toEncoding = HsJSONPB.toAesonEncoding

instance HsJSONPB.FromJSON TaskDataGetLastUpdatedError where
  parseJSON = HsJSONPB.parseJSONPB

instance HsProtobuf.Finite TaskDataGetLastUpdatedError

data TaskDataGetLastUpdatedRequest = TaskDataGetLastUpdatedRequest
  { taskDataGetLastUpdatedRequestIndex ::
      Hs.Text,
    taskDataGetLastUpdatedRequestCrawler ::
      Hs.Text
  }
  deriving (Hs.Show, Hs.Eq, Hs.Ord, Hs.Generic, Hs.NFData)

instance HsProtobuf.Named TaskDataGetLastUpdatedRequest where
  nameOf _ = (Hs.fromString "TaskDataGetLastUpdatedRequest")

instance HsProtobuf.HasDefault TaskDataGetLastUpdatedRequest

instance HsProtobuf.Message TaskDataGetLastUpdatedRequest where
  encodeMessage
    _
    TaskDataGetLastUpdatedRequest
      { taskDataGetLastUpdatedRequestIndex =
          taskDataGetLastUpdatedRequestIndex,
        taskDataGetLastUpdatedRequestCrawler =
          taskDataGetLastUpdatedRequestCrawler
      } =
      ( Hs.mconcat
          [ ( HsProtobuf.encodeMessageField
                (HsProtobuf.FieldNumber 1)
                taskDataGetLastUpdatedRequestIndex
            ),
            ( HsProtobuf.encodeMessageField
                (HsProtobuf.FieldNumber 2)
                taskDataGetLastUpdatedRequestCrawler
            )
          ]
      )
  decodeMessage _ =
    (Hs.pure TaskDataGetLastUpdatedRequest)
      <*> ( HsProtobuf.at
              HsProtobuf.decodeMessageField
              (HsProtobuf.FieldNumber 1)
          )
      <*> ( HsProtobuf.at
              HsProtobuf.decodeMessageField
              (HsProtobuf.FieldNumber 2)
          )
  dotProto _ =
    [ ( HsProtobuf.DotProtoField
          (HsProtobuf.FieldNumber 1)
          (HsProtobuf.Prim HsProtobuf.String)
          (HsProtobuf.Single "index")
          []
          ""
      ),
      ( HsProtobuf.DotProtoField
          (HsProtobuf.FieldNumber 2)
          (HsProtobuf.Prim HsProtobuf.String)
          (HsProtobuf.Single "crawler")
          []
          ""
      )
    ]

instance HsJSONPB.ToJSONPB TaskDataGetLastUpdatedRequest where
  toJSONPB (TaskDataGetLastUpdatedRequest f1 f2) =
    (HsJSONPB.object ["index" .= f1, "crawler" .= f2])
  toEncodingPB (TaskDataGetLastUpdatedRequest f1 f2) =
    (HsJSONPB.pairs ["index" .= f1, "crawler" .= f2])

instance HsJSONPB.FromJSONPB TaskDataGetLastUpdatedRequest where
  parseJSONPB =
    ( HsJSONPB.withObject
        "TaskDataGetLastUpdatedRequest"
        ( \obj ->
            (Hs.pure TaskDataGetLastUpdatedRequest) <*> obj .: "index"
              <*> obj .: "crawler"
        )
    )

instance HsJSONPB.ToJSON TaskDataGetLastUpdatedRequest where
  toJSON = HsJSONPB.toAesonValue
  toEncoding = HsJSONPB.toAesonEncoding

instance HsJSONPB.FromJSON TaskDataGetLastUpdatedRequest where
  parseJSON = HsJSONPB.parseJSONPB

instance HsJSONPB.ToSchema TaskDataGetLastUpdatedRequest where
  declareNamedSchema _ =
    do
      let declare_index = HsJSONPB.declareSchemaRef
      taskDataGetLastUpdatedRequestIndex <- declare_index Proxy.Proxy
      let declare_crawler = HsJSONPB.declareSchemaRef
      taskDataGetLastUpdatedRequestCrawler <- declare_crawler Proxy.Proxy
      let _ =
            Hs.pure TaskDataGetLastUpdatedRequest
              <*> HsJSONPB.asProxy declare_index
              <*> HsJSONPB.asProxy declare_crawler
      Hs.return
        ( HsJSONPB.NamedSchema
            { HsJSONPB._namedSchemaName =
                Hs.Just "TaskDataGetLastUpdatedRequest",
              HsJSONPB._namedSchemaSchema =
                Hs.mempty
                  { HsJSONPB._schemaParamSchema =
                      Hs.mempty
                        { HsJSONPB._paramSchemaType =
                            Hs.Just HsJSONPB.SwaggerObject
                        },
                    HsJSONPB._schemaProperties =
                      HsJSONPB.insOrdFromList
                        [ ( "index",
                            taskDataGetLastUpdatedRequestIndex
                          ),
                          ( "crawler",
                            taskDataGetLastUpdatedRequestCrawler
                          )
                        ]
                  }
            }
        )

newtype TaskDataGetLastUpdatedResponse = TaskDataGetLastUpdatedResponse
  { taskDataGetLastUpdatedResponseResult ::
      Hs.Maybe
        TaskDataGetLastUpdatedResponseResult
  }
  deriving (Hs.Show, Hs.Eq, Hs.Ord, Hs.Generic, Hs.NFData)

instance HsProtobuf.Named TaskDataGetLastUpdatedResponse where
  nameOf _ = (Hs.fromString "TaskDataGetLastUpdatedResponse")

instance HsProtobuf.HasDefault TaskDataGetLastUpdatedResponse

instance HsProtobuf.Message TaskDataGetLastUpdatedResponse where
  encodeMessage
    _
    TaskDataGetLastUpdatedResponse
      { taskDataGetLastUpdatedResponseResult =
          taskDataGetLastUpdatedResponseResult
      } =
      ( Hs.mconcat
          [ case taskDataGetLastUpdatedResponseResult of
              Hs.Nothing -> Hs.mempty
              Hs.Just x ->
                case x of
                  TaskDataGetLastUpdatedResponseResultError y ->
                    ( HsProtobuf.encodeMessageField
                        (HsProtobuf.FieldNumber 1)
                        (HsProtobuf.ForceEmit y)
                    )
                  TaskDataGetLastUpdatedResponseResultTimestamp y ->
                    ( HsProtobuf.encodeMessageField
                        (HsProtobuf.FieldNumber 2)
                        ( Hs.coerce @(Hs.Maybe Google.Protobuf.Timestamp.Timestamp)
                            @(HsProtobuf.Nested Google.Protobuf.Timestamp.Timestamp)
                            (Hs.Just y)
                        )
                    )
          ]
      )
  decodeMessage _ =
    (Hs.pure TaskDataGetLastUpdatedResponse)
      <*> ( HsProtobuf.oneof
              Hs.Nothing
              [ ( (HsProtobuf.FieldNumber 1),
                  (Hs.pure (Hs.Just Hs.. TaskDataGetLastUpdatedResponseResultError))
                    <*> HsProtobuf.decodeMessageField
                ),
                ( (HsProtobuf.FieldNumber 2),
                  (Hs.pure (Hs.fmap TaskDataGetLastUpdatedResponseResultTimestamp))
                    <*> ( Hs.coerce
                            @(_ (HsProtobuf.Nested Google.Protobuf.Timestamp.Timestamp))
                            @(_ (Hs.Maybe Google.Protobuf.Timestamp.Timestamp))
                            HsProtobuf.decodeMessageField
                        )
                )
              ]
          )
  dotProto _ = []

instance HsJSONPB.ToJSONPB TaskDataGetLastUpdatedResponse where
  toJSONPB (TaskDataGetLastUpdatedResponse f1_or_f2) =
    ( HsJSONPB.object
        [ ( let encodeResult =
                  ( case f1_or_f2 of
                      Hs.Just (TaskDataGetLastUpdatedResponseResultError f1) ->
                        (HsJSONPB.pair "error" f1)
                      Hs.Just (TaskDataGetLastUpdatedResponseResultTimestamp f2) ->
                        (HsJSONPB.pair "timestamp" f2)
                      Hs.Nothing -> Hs.mempty
                  )
             in \options ->
                  if HsJSONPB.optEmitNamedOneof options
                    then
                      ("result" .= (HsJSONPB.objectOrNull [encodeResult] options))
                        options
                    else encodeResult options
          )
        ]
    )
  toEncodingPB (TaskDataGetLastUpdatedResponse f1_or_f2) =
    ( HsJSONPB.pairs
        [ ( let encodeResult =
                  ( case f1_or_f2 of
                      Hs.Just (TaskDataGetLastUpdatedResponseResultError f1) ->
                        (HsJSONPB.pair "error" f1)
                      Hs.Just (TaskDataGetLastUpdatedResponseResultTimestamp f2) ->
                        (HsJSONPB.pair "timestamp" f2)
                      Hs.Nothing -> Hs.mempty
                  )
             in \options ->
                  if HsJSONPB.optEmitNamedOneof options
                    then ("result" .= (HsJSONPB.pairsOrNull [encodeResult] options)) options
                    else encodeResult options
          )
        ]
    )

instance HsJSONPB.FromJSONPB TaskDataGetLastUpdatedResponse where
  parseJSONPB =
    ( HsJSONPB.withObject
        "TaskDataGetLastUpdatedResponse"
        ( \obj ->
            (Hs.pure TaskDataGetLastUpdatedResponse)
              <*> ( let parseResult parseObj =
                          Hs.msum
                            [ Hs.Just Hs.. TaskDataGetLastUpdatedResponseResultError
                                <$> (HsJSONPB.parseField parseObj "error"),
                              Hs.Just Hs.. TaskDataGetLastUpdatedResponseResultTimestamp
                                <$> (HsJSONPB.parseField parseObj "timestamp"),
                              Hs.pure Hs.Nothing
                            ]
                     in ( (obj .: "result")
                            Hs.>>= (HsJSONPB.withObject "result" parseResult)
                        )
                          <|> (parseResult obj)
                  )
        )
    )

instance HsJSONPB.ToJSON TaskDataGetLastUpdatedResponse where
  toJSON = HsJSONPB.toAesonValue
  toEncoding = HsJSONPB.toAesonEncoding

instance HsJSONPB.FromJSON TaskDataGetLastUpdatedResponse where
  parseJSON = HsJSONPB.parseJSONPB

instance HsJSONPB.ToSchema TaskDataGetLastUpdatedResponse where
  declareNamedSchema _ =
    do
      let declare_result = HsJSONPB.declareSchemaRef
      taskDataGetLastUpdatedResponseResult <- declare_result Proxy.Proxy
      let _ =
            Hs.pure TaskDataGetLastUpdatedResponse
              <*> HsJSONPB.asProxy declare_result
      Hs.return
        ( HsJSONPB.NamedSchema
            { HsJSONPB._namedSchemaName =
                Hs.Just "TaskDataGetLastUpdatedResponse",
              HsJSONPB._namedSchemaSchema =
                Hs.mempty
                  { HsJSONPB._schemaParamSchema =
                      Hs.mempty
                        { HsJSONPB._paramSchemaType =
                            Hs.Just HsJSONPB.SwaggerObject
                        },
                    HsJSONPB._schemaProperties =
                      HsJSONPB.insOrdFromList
                        [ ( "result",
                            taskDataGetLastUpdatedResponseResult
                          )
                        ]
                  }
            }
        )

data TaskDataGetLastUpdatedResponseResult
  = TaskDataGetLastUpdatedResponseResultError
      ( HsProtobuf.Enumerated
          Monocle.TaskData.TaskDataGetLastUpdatedError
      )
  | TaskDataGetLastUpdatedResponseResultTimestamp Google.Protobuf.Timestamp.Timestamp
  deriving (Hs.Show, Hs.Eq, Hs.Ord, Hs.Generic, Hs.NFData)

instance HsProtobuf.Named TaskDataGetLastUpdatedResponseResult where
  nameOf _ = (Hs.fromString "TaskDataGetLastUpdatedResponseResult")

instance HsJSONPB.ToSchema TaskDataGetLastUpdatedResponseResult where
  declareNamedSchema _ =
    do
      let declare_error = HsJSONPB.declareSchemaRef
      taskDataGetLastUpdatedResponseResultError <-
        declare_error
          Proxy.Proxy
      let _ =
            Hs.pure TaskDataGetLastUpdatedResponseResultError
              <*> HsJSONPB.asProxy declare_error
      let declare_timestamp = HsJSONPB.declareSchemaRef
      taskDataGetLastUpdatedResponseResultTimestamp <-
        declare_timestamp
          Proxy.Proxy
      let _ =
            Hs.pure TaskDataGetLastUpdatedResponseResultTimestamp
              <*> HsJSONPB.asProxy declare_timestamp
      Hs.return
        ( HsJSONPB.NamedSchema
            { HsJSONPB._namedSchemaName =
                Hs.Just "TaskDataGetLastUpdatedResponseResult",
              HsJSONPB._namedSchemaSchema =
                Hs.mempty
                  { HsJSONPB._schemaParamSchema =
                      Hs.mempty
                        { HsJSONPB._paramSchemaType =
                            Hs.Just HsJSONPB.SwaggerObject
                        },
                    HsJSONPB._schemaProperties =
                      HsJSONPB.insOrdFromList
                        [ ( "error",
                            taskDataGetLastUpdatedResponseResultError
                          ),
                          ( "timestamp",
                            taskDataGetLastUpdatedResponseResultTimestamp
                          )
                        ],
                    HsJSONPB._schemaMinProperties = Hs.Just 1,
                    HsJSONPB._schemaMaxProperties = Hs.Just 1
                  }
            }
        )
