// Copyright: (c) 2021 Monocle authors
// SPDX-License-Identifier: AGPL-3.0-only

// This file define an empty service to force the openapi generator
// to set the right title and description in the generate openapi.yaml file.

syntax = "proto3";
package monocle_web;
option go_package = "monocle/http";

import "google/api/annotations.proto";

import "monocle/config.proto";
import "monocle/search.proto";
import "monocle/task_data.proto";

service Config {
  // Return the list of projects
  rpc GetProjects(monocle_config.GetProjectsRequest) returns (monocle_config.GetProjectsResponse) {
    option (google.api.http) = {
      post: "/api/1/get_projects"
      body: "*"
    };
  }
}

service Search {
  rpc Suggestions(monocle_search.SearchSuggestionsRequest)
      returns (monocle_search.SearchSuggestionsResponse) {
    option (google.api.http) = {
      post: "/api/1/suggestions"
      body: "*"
    };
  }
  rpc ChangesQuery(monocle_search.ChangesQueryRequest)
      returns (monocle_search.ChangesQueryResponse) {
    option (google.api.http) = {
      post: "/api/2/search/changes"
      body: "*"
    };
  }
}

service TaskData {
  // Commit the last updated timestamp
  rpc Commit(monocle_task_data.TaskDataCommitRequest) returns (monocle_task_data.TaskDataCommitResponse) {
    option (google.api.http) = {
      post: "/api/1/task_data_commit"
      body: "*"
    };
  }
  // Commit the last updated timestamp
  rpc GetLastUpdated(monocle_task_data.TaskDataGetLastUpdatedRequest)
      returns (monocle_task_data.TaskDataGetLastUpdatedResponse) {
    option (google.api.http) = {
      post: "/api/1/task_data_get_last_updated"
      body: "*"
    };
  }

  // Add task data
  rpc Add(monocle_task_data.AddRequest) returns (monocle_task_data.AddResponse) {
    option (google.api.http) = {
      post: "/api/1/task_data_add"
      body: "*"
    };
  }
}

// The monocle HTTP API
service Monocle {
}
