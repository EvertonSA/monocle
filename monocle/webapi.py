# Copyright (C) 2021 Monocle authors
# SPDX-License-Identifier: AGPL-3.0-or-later

# Generated by monocle-codegen. DO NOT EDIT!

from flask import request
from google.protobuf import json_format as pbjson


def task_data_service(app):
    from monocle.api import task_data_commit, task_data_get_last_updated, task_data_add
    from monocle.task_data_pb2 import TaskDataCommitRequest
    from monocle.task_data_pb2 import TaskDataCommitResponse
    from monocle.task_data_pb2 import TaskDataGetLastUpdatedRequest
    from monocle.task_data_pb2 import TaskDataGetLastUpdatedResponse
    from monocle.task_data_pb2 import AddRequest
    from monocle.task_data_pb2 import AddResponse

    def commit_stub() -> None:
        input_data: bytes = request.get_data() or b"{}"
        input_request: TaskDataCommitRequest = pbjson.Parse(input_data, TaskDataCommitRequest())  # type: ignore
        output_resp: TaskDataCommitResponse = task_data_commit(input_request)
        json_resp = pbjson.MessageToJson(output_resp, preserving_proto_field_name=True)
        return app.response_class(
            response=json_resp, status=200, mimetype="application/json"
        )

    app.add_url_rule(
        "/api/1/task_data_commit", "Commit", commit_stub, methods=["GET", "POST"]
    )

    def get_last_updated_stub() -> None:
        input_data: bytes = request.get_data() or b"{}"
        input_request: TaskDataGetLastUpdatedRequest = pbjson.Parse(input_data, TaskDataGetLastUpdatedRequest())  # type: ignore
        output_resp: TaskDataGetLastUpdatedResponse = task_data_get_last_updated(
            input_request
        )
        json_resp = pbjson.MessageToJson(output_resp, preserving_proto_field_name=True)
        return app.response_class(
            response=json_resp, status=200, mimetype="application/json"
        )

    app.add_url_rule(
        "/api/1/task_data_get_last_updated",
        "GetLastUpdated",
        get_last_updated_stub,
        methods=["GET", "POST"],
    )

    def add_stub() -> None:
        input_data: bytes = request.get_data() or b"{}"
        input_request: AddRequest = pbjson.Parse(input_data, AddRequest())  # type: ignore
        output_resp: AddResponse = task_data_add(input_request)
        json_resp = pbjson.MessageToJson(output_resp, preserving_proto_field_name=True)
        return app.response_class(
            response=json_resp, status=200, mimetype="application/json"
        )

    app.add_url_rule("/api/1/task_data_add", "Add", add_stub, methods=["GET", "POST"])
